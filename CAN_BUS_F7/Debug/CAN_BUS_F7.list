
CAN_BUS_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002014  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080021dc  080021dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080021dc  080021dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080021dc  080021dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021dc  080021dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021dc  080021dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080021e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080021f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080021f0  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006924  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000160b  00000000  00000000  000269a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  00027fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050d  00000000  00000000  00028698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025894  00000000  00000000  00028ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000701f  00000000  00000000  0004e439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed4d8  00000000  00000000  00055458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ad8  00000000  00000000  00142930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00144408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080021c4 	.word	0x080021c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080021c4 	.word	0x080021c4

08000208 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <LL_RCC_HSI_Enable+0x1c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <LL_RCC_HSI_Enable+0x1c>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6013      	str	r3, [r2, #0]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800

08000228 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <LL_RCC_HSI_IsReady+0x20>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f003 0302 	and.w	r3, r3, #2
 8000234:	2b02      	cmp	r3, #2
 8000236:	bf0c      	ite	eq
 8000238:	2301      	moveq	r3, #1
 800023a:	2300      	movne	r3, #0
 800023c:	b2db      	uxtb	r3, r3
}
 800023e:	4618      	mov	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	40023800 	.word	0x40023800

0800024c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	00db      	lsls	r3, r3, #3
 8000260:	4904      	ldr	r1, [pc, #16]	; (8000274 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000262:	4313      	orrs	r3, r2
 8000264:	600b      	str	r3, [r1, #0]
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800

08000278 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <LL_RCC_SetSysClkSource+0x24>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	f023 0203 	bic.w	r2, r3, #3
 8000288:	4904      	ldr	r1, [pc, #16]	; (800029c <LL_RCC_SetSysClkSource+0x24>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4313      	orrs	r3, r2
 800028e:	608b      	str	r3, [r1, #8]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	40023800 	.word	0x40023800

080002a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <LL_RCC_GetSysClkSource+0x18>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	f003 030c 	and.w	r3, r3, #12
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800

080002bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80002cc:	4904      	ldr	r1, [pc, #16]	; (80002e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4313      	orrs	r3, r2
 80002d2:	608b      	str	r3, [r1, #8]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40023800 	.word	0x40023800

080002e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80002f4:	4904      	ldr	r1, [pc, #16]	; (8000308 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	608b      	str	r3, [r1, #8]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40023800 	.word	0x40023800

0800030c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800031c:	4904      	ldr	r1, [pc, #16]	; (8000330 <LL_RCC_SetAPB2Prescaler+0x24>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	608b      	str	r3, [r1, #8]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	40023800 	.word	0x40023800

08000334 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <LL_RCC_PLL_Enable+0x1c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <LL_RCC_PLL_Enable+0x1c>)
 800033e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000342:	6013      	str	r3, [r2, #0]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800

08000354 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <LL_RCC_PLL_IsReady+0x24>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000364:	bf0c      	ite	eq
 8000366:	2301      	moveq	r3, #1
 8000368:	2300      	movne	r3, #0
 800036a:	b2db      	uxtb	r3, r3
}
 800036c:	4618      	mov	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800

0800037c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
 8000388:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800038c:	685a      	ldr	r2, [r3, #4]
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000390:	4013      	ands	r3, r2
 8000392:	68f9      	ldr	r1, [r7, #12]
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	4311      	orrs	r1, r2
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	0192      	lsls	r2, r2, #6
 800039c:	4311      	orrs	r1, r2
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	430a      	orrs	r2, r1
 80003a2:	4904      	ldr	r1, [pc, #16]	; (80003b4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80003a4:	4313      	orrs	r3, r2
 80003a6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLP);
}
 80003a8:	bf00      	nop
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40023800 	.word	0x40023800
 80003b8:	ffbc8000 	.word	0xffbc8000

080003bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003c8:	4907      	ldr	r1, [pc, #28]	; (80003e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4013      	ands	r3, r2
 80003d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003da:	68fb      	ldr	r3, [r7, #12]
}
 80003dc:	bf00      	nop
 80003de:	3714      	adds	r7, #20
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40023800 	.word	0x40023800

080003ec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <LL_FLASH_SetLatency+0x24>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f023 020f 	bic.w	r2, r3, #15
 80003fc:	4904      	ldr	r1, [pc, #16]	; (8000410 <LL_FLASH_SetLatency+0x24>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4313      	orrs	r3, r2
 8000402:	600b      	str	r3, [r1, #0]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40023c00 	.word	0x40023c00

08000414 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <LL_FLASH_GetLatency+0x18>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 030f 	and.w	r3, r3, #15
}
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40023c00 	.word	0x40023c00

08000430 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR1    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_ODEN);
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <LL_PWR_DisableOverDriveMode+0x1c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <LL_PWR_DisableOverDriveMode+0x1c>)
 800043a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40007000 	.word	0x40007000

08000450 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000460:	4904      	ldr	r1, [pc, #16]	; (8000474 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4313      	orrs	r3, r2
 8000466:	600b      	str	r3, [r1, #0]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	40007000 	.word	0x40007000

08000478 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR1   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR1, PWR_CSR1_VOSRDY) == (PWR_CSR1_VOSRDY));
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000488:	bf0c      	ite	eq
 800048a:	2301      	moveq	r3, #1
 800048c:	2300      	movne	r3, #0
 800048e:	b2db      	uxtb	r3, r3
}
 8000490:	4618      	mov	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40007000 	.word	0x40007000

080004a0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	041a      	lsls	r2, r3, #16
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	619a      	str	r2, [r3, #24]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
	...

080004c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;

uint8_t TxData[8];
uint8_t RxData[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004cc:	2100      	movs	r1, #0
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f000 fdf6 	bl	80010c0 <HAL_CAN_GetRxMessage>
  	id_flag = RxHeader.StdId;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004dc:	801a      	strh	r2, [r3, #0]
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000094 	.word	0x20000094
 80004ec:	2000006c 	.word	0x2000006c
 80004f0:	20000050 	.word	0x20000050

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004fa:	f000 f94d 	bl	8000798 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fa6e 	bl	80009de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f877 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f91b 	bl	8000740 <MX_GPIO_Init>
  MX_CAN1_Init();
 800050a:	f000 f8c5 	bl	8000698 <MX_CAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_CAN_Start(&hcan1);
 800050e:	4832      	ldr	r0, [pc, #200]	; (80005d8 <main+0xe4>)
 8000510:	f000 fcc2 	bl	8000e98 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000514:	2102      	movs	r1, #2
 8000516:	4830      	ldr	r0, [pc, #192]	; (80005d8 <main+0xe4>)
 8000518:	f000 fee4 	bl	80012e4 <HAL_CAN_ActivateNotification>



	TxHeader.DLC = 2;
 800051c:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <main+0xe8>)
 800051e:	2202      	movs	r2, #2
 8000520:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000522:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <main+0xe8>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000528:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <main+0xe8>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(LEDIOS_GPIO_Port, LEDIOS_Pin, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	2102      	movs	r1, #2
 8000532:	482b      	ldr	r0, [pc, #172]	; (80005e0 <main+0xec>)
 8000534:	f001 fc66 	bl	8001e04 <HAL_GPIO_WritePin>
	TxHeader.DLC = 1;
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <main+0xe8>)
 800053a:	2201      	movs	r2, #1
 800053c:	611a      	str	r2, [r3, #16]
	TxData[0] = 10;
 800053e:	4b29      	ldr	r3, [pc, #164]	; (80005e4 <main+0xf0>)
 8000540:	220a      	movs	r2, #10
 8000542:	701a      	strb	r2, [r3, #0]
	TxHeader.StdId = 0x101;
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <main+0xe8>)
 8000546:	f240 1201 	movw	r2, #257	; 0x101
 800054a:	601a      	str	r2, [r3, #0]
//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	uint8_t counter = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	71fb      	strb	r3, [r7, #7]
  while (1){
  	if(id_flag == 0x101 && RxData[0] == 11){
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <main+0xf4>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	f240 1201 	movw	r2, #257	; 0x101
 8000558:	4293      	cmp	r3, r2
 800055a:	d11a      	bne.n	8000592 <main+0x9e>
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <main+0xf8>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b0b      	cmp	r3, #11
 8000562:	d116      	bne.n	8000592 <main+0x9e>
			TxHeader.DLC = 1;
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <main+0xe8>)
 8000566:	2201      	movs	r2, #1
 8000568:	611a      	str	r2, [r3, #16]
			++counter;
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	3301      	adds	r3, #1
 800056e:	71fb      	strb	r3, [r7, #7]
			TxData[0] = counter;
 8000570:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <main+0xf0>)
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	7013      	strb	r3, [r2, #0]
			TxHeader.StdId = 0x101;
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <main+0xe8>)
 8000578:	f240 1201 	movw	r2, #257	; 0x101
 800057c:	601a      	str	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <main+0xfc>)
 8000580:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <main+0xf0>)
 8000582:	4916      	ldr	r1, [pc, #88]	; (80005dc <main+0xe8>)
 8000584:	4814      	ldr	r0, [pc, #80]	; (80005d8 <main+0xe4>)
 8000586:	f000 fccb 	bl	8000f20 <HAL_CAN_AddTxMessage>
			id_flag = 0;
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <main+0xf4>)
 800058c:	2200      	movs	r2, #0
 800058e:	801a      	strh	r2, [r3, #0]
 8000590:	e020      	b.n	80005d4 <main+0xe0>
		}
		else if(id_flag == 0x102){
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <main+0xf4>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800059a:	d1d9      	bne.n	8000550 <main+0x5c>
			for(int i = 0; i < RxData[1] * 2; ++i){
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	e012      	b.n	80005c8 <main+0xd4>
				HAL_GPIO_TogglePin(LEDIOS_GPIO_Port, LEDIOS_Pin);
 80005a2:	2102      	movs	r1, #2
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <main+0xec>)
 80005a6:	f001 fc46 	bl	8001e36 <HAL_GPIO_TogglePin>
				HAL_Delay(RxData[0] * 250);
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <main+0xf8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	23fa      	movs	r3, #250	; 0xfa
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa6e 	bl	8000a98 <HAL_Delay>
				id_flag = 0;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <main+0xf4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	801a      	strh	r2, [r3, #0]
			for(int i = 0; i < RxData[1] * 2; ++i){
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <main+0xf8>)
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbe6      	blt.n	80005a2 <main+0xae>
  	if(id_flag == 0x101 && RxData[0] == 11){
 80005d4:	e7bc      	b.n	8000550 <main+0x5c>
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	20000054 	.word	0x20000054
 80005e0:	40022000 	.word	0x40022000
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	20000050 	.word	0x20000050
 80005ec:	20000094 	.word	0x20000094
 80005f0:	20000088 	.word	0x20000088

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f7ff fef7 	bl	80003ec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80005fe:	bf00      	nop
 8000600:	f7ff ff08 	bl	8000414 <LL_FLASH_GetLatency>
 8000604:	4603      	mov	r3, r0
 8000606:	2b02      	cmp	r3, #2
 8000608:	d1fa      	bne.n	8000600 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 800060a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800060e:	f7ff ff1f 	bl	8000450 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 8000612:	f7ff ff0d 	bl	8000430 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000616:	2010      	movs	r0, #16
 8000618:	f7ff fe18 	bl	800024c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800061c:	f7ff fdf4 	bl	8000208 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000620:	bf00      	nop
 8000622:	f7ff fe01 	bl	8000228 <LL_RCC_HSI_IsReady>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d1fa      	bne.n	8000622 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 80, LL_RCC_PLLP_DIV_2);
 800062c:	2300      	movs	r3, #0
 800062e:	2250      	movs	r2, #80	; 0x50
 8000630:	2108      	movs	r1, #8
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fea2 	bl	800037c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000638:	f7ff fe7c 	bl	8000334 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800063c:	bf00      	nop
 800063e:	f7ff fe89 	bl	8000354 <LL_RCC_PLL_IsReady>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d1fa      	bne.n	800063e <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000648:	bf00      	nop
 800064a:	f7ff ff15 	bl	8000478 <LL_PWR_IsActiveFlag_VOS>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0fa      	beq.n	800064a <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fe31 	bl	80002bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800065a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800065e:	f7ff fe41 	bl	80002e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff fe52 	bl	800030c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000668:	2002      	movs	r0, #2
 800066a:	f7ff fe05 	bl	8000278 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800066e:	bf00      	nop
 8000670:	f7ff fe16 	bl	80002a0 <LL_RCC_GetSysClkSource>
 8000674:	4603      	mov	r3, r0
 8000676:	2b08      	cmp	r3, #8
 8000678:	d1fa      	bne.n	8000670 <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(80000000);
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <SystemClock_Config+0xa0>)
 800067c:	f001 fd6e 	bl	800215c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000680:	200f      	movs	r0, #15
 8000682:	f000 f9b9 	bl	80009f8 <HAL_InitTick>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800068c:	f000 f8b0 	bl	80007f0 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	04c4b400 	.word	0x04c4b400

08000698 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006a0:	4a26      	ldr	r2, [pc, #152]	; (800073c <MX_CAN1_Init+0xa4>)
 80006a2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006a6:	2214      	movs	r2, #20
 80006a8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006bc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006e8:	4813      	ldr	r0, [pc, #76]	; (8000738 <MX_CAN1_Init+0xa0>)
 80006ea:	f000 f9f9 	bl	8000ae0 <HAL_CAN_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f87c 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 80006fc:	230a      	movs	r3, #10
 80006fe:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x100 << 5;
 8000704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000708:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x100 << 5;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800071c:	2301      	movs	r3, #1
 800071e:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000720:	230d      	movs	r3, #13
 8000722:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_CAN1_Init+0xa0>)
 800072a:	f000 fad5 	bl	8000cd8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3728      	adds	r7, #40	; 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000028 	.word	0x20000028
 800073c:	40006400 	.word	0x40006400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000756:	2002      	movs	r0, #2
 8000758:	f7ff fe30 	bl	80003bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOI);
 800075c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000760:	f7ff fe2c 	bl	80003bc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LEDIOS_GPIO_Port, LEDIOS_Pin);
 8000764:	2102      	movs	r1, #2
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0x54>)
 8000768:	f7ff fe9a 	bl	80004a0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LEDIOS_Pin;
 800076c:	2302      	movs	r3, #2
 800076e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000770:	2301      	movs	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LEDIOS_GPIO_Port, &GPIO_InitStruct);
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <MX_GPIO_Init+0x54>)
 8000786:	f001 fc75 	bl	8002074 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40022000 	.word	0x40022000

08000798 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007aa:	f001 f903 	bl	80019b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007ba:	231f      	movs	r3, #31
 80007bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007be:	2387      	movs	r3, #135	; 0x87
 80007c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007c6:	2300      	movs	r3, #0
 80007c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ca:	2301      	movs	r3, #1
 80007cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007da:	463b      	mov	r3, r7
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 f921 	bl	8001a24 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007e2:	2004      	movs	r0, #4
 80007e4:	f001 f8fe 	bl	80019e4 <HAL_MPU_Enable>

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_MspInit+0x44>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <HAL_MspInit+0x44>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_MspInit+0x44>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x44>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x44>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x44>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a24      	ldr	r2, [pc, #144]	; (80008f4 <HAL_CAN_MspInit+0xb0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d141      	bne.n	80008ea <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <HAL_CAN_MspInit+0xb4>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <HAL_CAN_MspInit+0xb4>)
 800086c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <HAL_CAN_MspInit+0xb4>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <HAL_CAN_MspInit+0xb4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <HAL_CAN_MspInit+0xb4>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <HAL_CAN_MspInit+0xb4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008a8:	2309      	movs	r3, #9
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4812      	ldr	r0, [pc, #72]	; (80008fc <HAL_CAN_MspInit+0xb8>)
 80008b4:	f001 f8fa 	bl	8001aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c6:	2303      	movs	r3, #3
 80008c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008ca:	2309      	movs	r3, #9
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <HAL_CAN_MspInit+0xb8>)
 80008d6:	f001 f8e9 	bl	8001aac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	2014      	movs	r0, #20
 80008e0:	f001 f831 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008e4:	2014      	movs	r0, #20
 80008e6:	f001 f84a 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40006400 	.word	0x40006400
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020400 	.word	0x40020400

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 f884 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <CAN1_RX0_IRQHandler+0x10>)
 800095a:	f000 fce9 	bl	8001330 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000028 	.word	0x20000028

08000968 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <SystemInit+0x20>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SystemInit+0x20>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000992:	490e      	ldr	r1, [pc, #56]	; (80009cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a8:	4c0b      	ldr	r4, [pc, #44]	; (80009d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009b6:	f7ff ffd7 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ba:	f001 fbdf 	bl	800217c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009be:	f7ff fd99 	bl	80004f4 <main>
  bx  lr    
 80009c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d0:	080021e4 	.word	0x080021e4
  ldr r2, =_sbss
 80009d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d8:	200000a0 	.word	0x200000a0

080009dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC_IRQHandler>

080009de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e2:	2003      	movs	r0, #3
 80009e4:	f000 ffa4 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e8:	200f      	movs	r0, #15
 80009ea:	f000 f805 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ee:	f7ff ff05 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 ffbf 	bl	800199a <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 ff87 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	2000009c 	.word	0x2000009c

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	2000009c 	.word	0x2000009c

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffde 	bl	8000a80 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008

08000ae0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e0ed      	b.n	8000cce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fea0 	bl	8000844 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0201 	orr.w	r2, r2, #1
 8000b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b14:	f7ff ffb4 	bl	8000a80 <HAL_GetTick>
 8000b18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b1a:	e012      	b.n	8000b42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b1c:	f7ff ffb0 	bl	8000a80 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2b0a      	cmp	r3, #10
 8000b28:	d90b      	bls.n	8000b42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2205      	movs	r2, #5
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e0c5      	b.n	8000cce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0e5      	beq.n	8000b1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0202 	bic.w	r2, r2, #2
 8000b5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b60:	f7ff ff8e 	bl	8000a80 <HAL_GetTick>
 8000b64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b66:	e012      	b.n	8000b8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b68:	f7ff ff8a 	bl	8000a80 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b0a      	cmp	r3, #10
 8000b74:	d90b      	bls.n	8000b8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2205      	movs	r2, #5
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e09f      	b.n	8000cce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1e5      	bne.n	8000b68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7e1b      	ldrb	r3, [r3, #24]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d108      	bne.n	8000bb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	e007      	b.n	8000bc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7e5b      	ldrb	r3, [r3, #25]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d108      	bne.n	8000be0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e007      	b.n	8000bf0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7e9b      	ldrb	r3, [r3, #26]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d108      	bne.n	8000c0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0220 	orr.w	r2, r2, #32
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e007      	b.n	8000c1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0220 	bic.w	r2, r2, #32
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7edb      	ldrb	r3, [r3, #27]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 0210 	bic.w	r2, r2, #16
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e007      	b.n	8000c44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f042 0210 	orr.w	r2, r2, #16
 8000c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7f1b      	ldrb	r3, [r3, #28]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d108      	bne.n	8000c5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0208 	orr.w	r2, r2, #8
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e007      	b.n	8000c6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0208 	bic.w	r2, r2, #8
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7f5b      	ldrb	r3, [r3, #29]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d108      	bne.n	8000c88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0204 	orr.w	r2, r2, #4
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0204 	bic.w	r2, r2, #4
 8000c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	ea42 0103 	orr.w	r1, r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cf0:	7cfb      	ldrb	r3, [r7, #19]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d003      	beq.n	8000cfe <HAL_CAN_ConfigFilter+0x26>
 8000cf6:	7cfb      	ldrb	r3, [r7, #19]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	f040 80be 	bne.w	8000e7a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000cfe:	4b65      	ldr	r3, [pc, #404]	; (8000e94 <HAL_CAN_ConfigFilter+0x1bc>)
 8000d00:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d08:	f043 0201 	orr.w	r2, r3, #1
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	2201      	movs	r2, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	401a      	ands	r2, r3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d123      	bne.n	8000da8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	3248      	adds	r2, #72	; 0x48
 8000d88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d9e:	6979      	ldr	r1, [r7, #20]
 8000da0:	3348      	adds	r3, #72	; 0x48
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d122      	bne.n	8000df6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dd0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3248      	adds	r2, #72	; 0x48
 8000dd6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dec:	6979      	ldr	r1, [r7, #20]
 8000dee:	3348      	adds	r3, #72	; 0x48
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	440b      	add	r3, r1
 8000df4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	401a      	ands	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e10:	e007      	b.n	8000e22 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d109      	bne.n	8000e3e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	401a      	ands	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e3c:	e007      	b.n	8000e4e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d107      	bne.n	8000e66 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e6c:	f023 0201 	bic.w	r2, r3, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e006      	b.n	8000e88 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
  }
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40006400 	.word	0x40006400

08000e98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d12e      	bne.n	8000f0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2202      	movs	r2, #2
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ec4:	f7ff fddc 	bl	8000a80 <HAL_GetTick>
 8000ec8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eca:	e012      	b.n	8000ef2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ecc:	f7ff fdd8 	bl	8000a80 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b0a      	cmp	r3, #10
 8000ed8:	d90b      	bls.n	8000ef2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2205      	movs	r2, #5
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e012      	b.n	8000f18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e5      	bne.n	8000ecc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e006      	b.n	8000f18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
  }
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f34:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d003      	beq.n	8000f4c <HAL_CAN_AddTxMessage+0x2c>
 8000f44:	7ffb      	ldrb	r3, [r7, #31]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	f040 80ad 	bne.w	80010a6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10a      	bne.n	8000f6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8095 	beq.w	8001096 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	0e1b      	lsrs	r3, r3, #24
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f76:	2201      	movs	r2, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10d      	bne.n	8000fa4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f92:	68f9      	ldr	r1, [r7, #12]
 8000f94:	6809      	ldr	r1, [r1, #0]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3318      	adds	r3, #24
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	440b      	add	r3, r1
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e00f      	b.n	8000fc4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fb8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3318      	adds	r3, #24
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	440b      	add	r3, r1
 8000fc2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3318      	adds	r3, #24
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	7d1b      	ldrb	r3, [r3, #20]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d111      	bne.n	8001004 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3318      	adds	r3, #24
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	4413      	add	r3, r2
 8000fec:	3304      	adds	r3, #4
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	6811      	ldr	r1, [r2, #0]
 8000ff4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3318      	adds	r3, #24
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	440b      	add	r3, r1
 8001000:	3304      	adds	r3, #4
 8001002:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3307      	adds	r3, #7
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	061a      	lsls	r2, r3, #24
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3306      	adds	r3, #6
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	041b      	lsls	r3, r3, #16
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3305      	adds	r3, #5
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	4313      	orrs	r3, r2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	3204      	adds	r2, #4
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	4610      	mov	r0, r2
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	6811      	ldr	r1, [r2, #0]
 800102c:	ea43 0200 	orr.w	r2, r3, r0
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	440b      	add	r3, r1
 8001036:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800103a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3303      	adds	r3, #3
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	061a      	lsls	r2, r3, #24
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3302      	adds	r3, #2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3301      	adds	r3, #1
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	4313      	orrs	r3, r2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	7812      	ldrb	r2, [r2, #0]
 800105c:	4610      	mov	r0, r2
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	6811      	ldr	r1, [r2, #0]
 8001062:	ea43 0200 	orr.w	r2, r3, r0
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	440b      	add	r3, r1
 800106c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001070:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3318      	adds	r3, #24
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	6811      	ldr	r1, [r2, #0]
 8001084:	f043 0201 	orr.w	r2, r3, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3318      	adds	r3, #24
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	440b      	add	r3, r1
 8001090:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e00e      	b.n	80010b4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e006      	b.n	80010b4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
  }
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3724      	adds	r7, #36	; 0x24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d003      	beq.n	80010e4 <HAL_CAN_GetRxMessage+0x24>
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	f040 80f3 	bne.w	80012ca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10e      	bne.n	8001108 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d116      	bne.n	8001126 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0e7      	b.n	80012d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d107      	bne.n	8001126 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e0d8      	b.n	80012d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	331b      	adds	r3, #27
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0204 	and.w	r2, r3, #4
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10c      	bne.n	800115e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	331b      	adds	r3, #27
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	4413      	add	r3, r2
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	0d5b      	lsrs	r3, r3, #21
 8001154:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e00b      	b.n	8001176 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	331b      	adds	r3, #27
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	331b      	adds	r3, #27
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0202 	and.w	r2, r3, #2
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	331b      	adds	r3, #27
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4413      	add	r3, r2
 8001198:	3304      	adds	r3, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 020f 	and.w	r2, r3, #15
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	331b      	adds	r3, #27
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	3304      	adds	r3, #4
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	331b      	adds	r3, #27
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	3304      	adds	r3, #4
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0a1a      	lsrs	r2, r3, #8
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0c1a      	lsrs	r2, r3, #16
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3302      	adds	r3, #2
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0e1a      	lsrs	r2, r3, #24
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	3303      	adds	r3, #3
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4413      	add	r3, r2
 8001242:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3304      	adds	r3, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	4413      	add	r3, r2
 800125a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0a1a      	lsrs	r2, r3, #8
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3305      	adds	r3, #5
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	0c1a      	lsrs	r2, r3, #16
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3306      	adds	r3, #6
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4413      	add	r3, r2
 800128e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0e1a      	lsrs	r2, r3, #24
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	3307      	adds	r3, #7
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d108      	bne.n	80012b6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0220 	orr.w	r2, r2, #32
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0220 	orr.w	r2, r2, #32
 80012c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e006      	b.n	80012d8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
  }
}
 80012d8:	4618      	mov	r0, r3
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d002      	beq.n	8001302 <HAL_CAN_ActivateNotification+0x1e>
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d109      	bne.n	8001316 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6959      	ldr	r1, [r3, #20]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e006      	b.n	8001324 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
  }
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d07c      	beq.n	8001470 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d023      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f983 	bl	800169e <HAL_CAN_TxMailbox0CompleteCallback>
 8001398:	e016      	b.n	80013c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
 80013ac:	e00c      	b.n	80013c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
 80013c0:	e002      	b.n	80013c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f989 	bl	80016da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d024      	beq.n	800141c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f963 	bl	80016b2 <HAL_CAN_TxMailbox1CompleteCallback>
 80013ec:	e016      	b.n	800141c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001400:	e00c      	b.n	800141c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
 8001414:	e002      	b.n	800141c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f969 	bl	80016ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d024      	beq.n	8001470 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800142e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f943 	bl	80016c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001440:	e016      	b.n	8001470 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
 8001454:	e00c      	b.n	8001470 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d004      	beq.n	800146a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
 8001468:	e002      	b.n	8001470 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f949 	bl	8001702 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00c      	beq.n	8001494 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2210      	movs	r2, #16
 8001492:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2208      	movs	r2, #8
 80014ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f930 	bl	8001716 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d009      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7fe fff6 	bl	80004c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00c      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2210      	movs	r2, #16
 80014f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2208      	movs	r2, #8
 8001512:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f912 	bl	800173e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f8f9 	bl	800172a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2210      	movs	r2, #16
 8001552:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f8fc 	bl	8001752 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2208      	movs	r2, #8
 8001574:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f8f5 	bl	8001766 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d07b      	beq.n	800167e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d072      	beq.n	8001676 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d043      	beq.n	8001676 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d03e      	beq.n	8001676 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015fe:	2b60      	cmp	r3, #96	; 0x60
 8001600:	d02b      	beq.n	800165a <HAL_CAN_IRQHandler+0x32a>
 8001602:	2b60      	cmp	r3, #96	; 0x60
 8001604:	d82e      	bhi.n	8001664 <HAL_CAN_IRQHandler+0x334>
 8001606:	2b50      	cmp	r3, #80	; 0x50
 8001608:	d022      	beq.n	8001650 <HAL_CAN_IRQHandler+0x320>
 800160a:	2b50      	cmp	r3, #80	; 0x50
 800160c:	d82a      	bhi.n	8001664 <HAL_CAN_IRQHandler+0x334>
 800160e:	2b40      	cmp	r3, #64	; 0x40
 8001610:	d019      	beq.n	8001646 <HAL_CAN_IRQHandler+0x316>
 8001612:	2b40      	cmp	r3, #64	; 0x40
 8001614:	d826      	bhi.n	8001664 <HAL_CAN_IRQHandler+0x334>
 8001616:	2b30      	cmp	r3, #48	; 0x30
 8001618:	d010      	beq.n	800163c <HAL_CAN_IRQHandler+0x30c>
 800161a:	2b30      	cmp	r3, #48	; 0x30
 800161c:	d822      	bhi.n	8001664 <HAL_CAN_IRQHandler+0x334>
 800161e:	2b10      	cmp	r3, #16
 8001620:	d002      	beq.n	8001628 <HAL_CAN_IRQHandler+0x2f8>
 8001622:	2b20      	cmp	r3, #32
 8001624:	d005      	beq.n	8001632 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001626:	e01d      	b.n	8001664 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	f043 0308 	orr.w	r3, r3, #8
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001630:	e019      	b.n	8001666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	f043 0310 	orr.w	r3, r3, #16
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800163a:	e014      	b.n	8001666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	f043 0320 	orr.w	r3, r3, #32
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001644:	e00f      	b.n	8001666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800164e:	e00a      	b.n	8001666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001658:	e005      	b.n	8001666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001662:	e000      	b.n	8001666 <HAL_CAN_IRQHandler+0x336>
            break;
 8001664:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001674:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2204      	movs	r2, #4
 800167c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f872 	bl	800177a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <__NVIC_SetPriorityGrouping+0x40>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x40>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00
 80017d4:	05fa0000 	.word	0x05fa0000

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019b8:	f3bf 8f5f 	dmb	sy
}
 80019bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_MPU_Disable+0x28>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_MPU_Disable+0x28>)
 80019c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_MPU_Disable+0x2c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	e000ed90 	.word	0xe000ed90

080019e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_MPU_Enable+0x38>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_MPU_Enable+0x3c>)
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_MPU_Enable+0x3c>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a02:	f3bf 8f4f 	dsb	sy
}
 8001a06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a08:	f3bf 8f6f 	isb	sy
}
 8001a0c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed90 	.word	0xe000ed90
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	785a      	ldrb	r2, [r3, #1]
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_MPU_ConfigRegion+0x84>)
 8001a32:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d029      	beq.n	8001a90 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <HAL_MPU_ConfigRegion+0x84>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7b1b      	ldrb	r3, [r3, #12]
 8001a48:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7adb      	ldrb	r3, [r3, #11]
 8001a4e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7a9b      	ldrb	r3, [r3, #10]
 8001a56:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7b5b      	ldrb	r3, [r3, #13]
 8001a5e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7b9b      	ldrb	r3, [r3, #14]
 8001a66:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7bdb      	ldrb	r3, [r3, #15]
 8001a6e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7a5b      	ldrb	r3, [r3, #9]
 8001a76:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7a1b      	ldrb	r3, [r3, #8]
 8001a7e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a80:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a8a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a8c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a8e:	e005      	b.n	8001a9c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_MPU_ConfigRegion+0x84>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <HAL_MPU_ConfigRegion+0x84>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed90 	.word	0xe000ed90

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e175      	b.n	8001db8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 8164 	bne.w	8001db2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d005      	beq.n	8001b02 <HAL_GPIO_Init+0x56>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d130      	bne.n	8001b64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 0201 	and.w	r2, r3, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d017      	beq.n	8001ba0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d123      	bne.n	8001bf4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	08da      	lsrs	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3208      	adds	r2, #8
 8001bee:	69b9      	ldr	r1, [r7, #24]
 8001bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80be 	beq.w	8001db2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	4b66      	ldr	r3, [pc, #408]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a65      	ldr	r2, [pc, #404]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_GPIO_Init+0x324>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c4e:	4a61      	ldr	r2, [pc, #388]	; (8001dd4 <HAL_GPIO_Init+0x328>)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <HAL_GPIO_Init+0x32c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d037      	beq.n	8001cea <HAL_GPIO_Init+0x23e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <HAL_GPIO_Init+0x330>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d031      	beq.n	8001ce6 <HAL_GPIO_Init+0x23a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a56      	ldr	r2, [pc, #344]	; (8001de0 <HAL_GPIO_Init+0x334>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d02b      	beq.n	8001ce2 <HAL_GPIO_Init+0x236>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a55      	ldr	r2, [pc, #340]	; (8001de4 <HAL_GPIO_Init+0x338>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d025      	beq.n	8001cde <HAL_GPIO_Init+0x232>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a54      	ldr	r2, [pc, #336]	; (8001de8 <HAL_GPIO_Init+0x33c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01f      	beq.n	8001cda <HAL_GPIO_Init+0x22e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a53      	ldr	r2, [pc, #332]	; (8001dec <HAL_GPIO_Init+0x340>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x22a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_GPIO_Init+0x344>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x226>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a51      	ldr	r2, [pc, #324]	; (8001df4 <HAL_GPIO_Init+0x348>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x222>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a50      	ldr	r2, [pc, #320]	; (8001df8 <HAL_GPIO_Init+0x34c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x21e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4f      	ldr	r2, [pc, #316]	; (8001dfc <HAL_GPIO_Init+0x350>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x21a>
 8001cc2:	2309      	movs	r3, #9
 8001cc4:	e012      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	e010      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001cca:	2308      	movs	r3, #8
 8001ccc:	e00e      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	e00c      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	e00a      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	e008      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e004      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_GPIO_Init+0x240>
 8001cea:	2300      	movs	r3, #0
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	f002 0203 	and.w	r2, r2, #3
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	4093      	lsls	r3, r2
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cfc:	4935      	ldr	r1, [pc, #212]	; (8001dd4 <HAL_GPIO_Init+0x328>)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_GPIO_Init+0x354>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d2e:	4a34      	ldr	r2, [pc, #208]	; (8001e00 <HAL_GPIO_Init+0x354>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HAL_GPIO_Init+0x354>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d58:	4a29      	ldr	r2, [pc, #164]	; (8001e00 <HAL_GPIO_Init+0x354>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_GPIO_Init+0x354>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d82:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_GPIO_Init+0x354>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_GPIO_Init+0x354>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_GPIO_Init+0x354>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3301      	adds	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b0f      	cmp	r3, #15
 8001dbc:	f67f ae86 	bls.w	8001acc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020c00 	.word	0x40020c00
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40021400 	.word	0x40021400
 8001df0:	40021800 	.word	0x40021800
 8001df4:	40021c00 	.word	0x40021c00
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	40022400 	.word	0x40022400
 8001e00:	40013c00 	.word	0x40013c00

08001e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e20:	e003      	b.n	8001e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	041a      	lsls	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	619a      	str	r2, [r3, #24]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e48:	887a      	ldrh	r2, [r7, #2]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	041a      	lsls	r2, r3, #16
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43d9      	mvns	r1, r3
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	400b      	ands	r3, r1
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	619a      	str	r2, [r3, #24]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_GPIO_SetPinMode>:
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b089      	sub	sp, #36	; 0x24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2103      	movs	r1, #3
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	401a      	ands	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	61bb      	str	r3, [r7, #24]
  return result;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3724      	adds	r7, #36	; 0x24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_GPIO_SetPinOutputType>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	401a      	ands	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	605a      	str	r2, [r3, #4]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_GPIO_SetPinSpeed>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	613b      	str	r3, [r7, #16]
  return result;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2103      	movs	r1, #3
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	61bb      	str	r3, [r7, #24]
  return result;
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	431a      	orrs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	609a      	str	r2, [r3, #8]
}
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_GPIO_SetPinPull>:
{
 8001f56:	b480      	push	{r7}
 8001f58:	b089      	sub	sp, #36	; 0x24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	613b      	str	r3, [r7, #16]
  return result;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	401a      	ands	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	61bb      	str	r3, [r7, #24]
  return result;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	60da      	str	r2, [r3, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3724      	adds	r7, #36	; 0x24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_GPIO_SetAFPin_0_7>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	613b      	str	r3, [r7, #16]
  return result;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	210f      	movs	r1, #15
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	61bb      	str	r3, [r7, #24]
  return result;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	431a      	orrs	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	621a      	str	r2, [r3, #32]
}
 8002006:	bf00      	nop
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_GPIO_SetAFPin_8_15>:
{
 8002012:	b480      	push	{r7}
 8002014:	b089      	sub	sp, #36	; 0x24
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	613b      	str	r3, [r7, #16]
  return result;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	210f      	movs	r1, #15
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	61bb      	str	r3, [r7, #24]
  return result;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	431a      	orrs	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002068:	bf00      	nop
 800206a:	3724      	adds	r7, #36	; 0x24
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	613b      	str	r3, [r7, #16]
  return result;
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800209e:	e051      	b.n	8002144 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d043      	beq.n	800213e <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d003      	beq.n	80020c6 <LL_GPIO_Init+0x52>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d10e      	bne.n	80020e4 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	461a      	mov	r2, r3
 80020cc:	69b9      	ldr	r1, [r7, #24]
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff12 	bl	8001ef8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	461a      	mov	r2, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fef2 	bl	8001ec8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	461a      	mov	r2, r3
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff32 	bl	8001f56 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d11a      	bne.n	8002130 <LL_GPIO_Init+0xbc>
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	60bb      	str	r3, [r7, #8]
  return result;
 8002106:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b07      	cmp	r3, #7
 8002110:	d807      	bhi.n	8002122 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	461a      	mov	r2, r3
 8002118:	69b9      	ldr	r1, [r7, #24]
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff4a 	bl	8001fb4 <LL_GPIO_SetAFPin_0_7>
 8002120:	e006      	b.n	8002130 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	461a      	mov	r2, r3
 8002128:	69b9      	ldr	r1, [r7, #24]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ff71 	bl	8002012 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	461a      	mov	r2, r3
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fe96 	bl	8001e6a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1a6      	bne.n	80020a0 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <LL_SetSystemCoreClock+0x1c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000

0800217c <__libc_init_array>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	4d0d      	ldr	r5, [pc, #52]	; (80021b4 <__libc_init_array+0x38>)
 8002180:	4c0d      	ldr	r4, [pc, #52]	; (80021b8 <__libc_init_array+0x3c>)
 8002182:	1b64      	subs	r4, r4, r5
 8002184:	10a4      	asrs	r4, r4, #2
 8002186:	2600      	movs	r6, #0
 8002188:	42a6      	cmp	r6, r4
 800218a:	d109      	bne.n	80021a0 <__libc_init_array+0x24>
 800218c:	4d0b      	ldr	r5, [pc, #44]	; (80021bc <__libc_init_array+0x40>)
 800218e:	4c0c      	ldr	r4, [pc, #48]	; (80021c0 <__libc_init_array+0x44>)
 8002190:	f000 f818 	bl	80021c4 <_init>
 8002194:	1b64      	subs	r4, r4, r5
 8002196:	10a4      	asrs	r4, r4, #2
 8002198:	2600      	movs	r6, #0
 800219a:	42a6      	cmp	r6, r4
 800219c:	d105      	bne.n	80021aa <__libc_init_array+0x2e>
 800219e:	bd70      	pop	{r4, r5, r6, pc}
 80021a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a4:	4798      	blx	r3
 80021a6:	3601      	adds	r6, #1
 80021a8:	e7ee      	b.n	8002188 <__libc_init_array+0xc>
 80021aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ae:	4798      	blx	r3
 80021b0:	3601      	adds	r6, #1
 80021b2:	e7f2      	b.n	800219a <__libc_init_array+0x1e>
 80021b4:	080021dc 	.word	0x080021dc
 80021b8:	080021dc 	.word	0x080021dc
 80021bc:	080021dc 	.word	0x080021dc
 80021c0:	080021e0 	.word	0x080021e0

080021c4 <_init>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	bf00      	nop
 80021c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ca:	bc08      	pop	{r3}
 80021cc:	469e      	mov	lr, r3
 80021ce:	4770      	bx	lr

080021d0 <_fini>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	bf00      	nop
 80021d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d6:	bc08      	pop	{r3}
 80021d8:	469e      	mov	lr, r3
 80021da:	4770      	bx	lr
