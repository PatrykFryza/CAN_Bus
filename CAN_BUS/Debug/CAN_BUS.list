
CAN_BUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004100  08004100  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004100  08004100  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004100  08004100  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  08004170  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004170  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b6c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6e  00000000  00000000  00029c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008de  00000000  00000000  0002c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f7f  00000000  00000000  0002d076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2e9  00000000  00000000  00055ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f294c  00000000  00000000  000612de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037cc  00000000  00000000  00153c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001573f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800400c 	.word	0x0800400c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800400c 	.word	0x0800400c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__NVIC_GetPriorityGrouping+0x18>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	0a1b      	lsrs	r3, r3, #8
 800027a:	f003 0307 	and.w	r3, r3, #7
}
 800027e:	4618      	mov	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	2b00      	cmp	r3, #0
 800029c:	db0b      	blt.n	80002b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	f003 021f 	and.w	r2, r3, #31
 80002a4:	4907      	ldr	r1, [pc, #28]	; (80002c4 <__NVIC_EnableIRQ+0x38>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	095b      	lsrs	r3, r3, #5
 80002ac:	2001      	movs	r0, #1
 80002ae:	fa00 f202 	lsl.w	r2, r0, r2
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	6039      	str	r1, [r7, #0]
 80002d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db0a      	blt.n	80002f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	490c      	ldr	r1, [pc, #48]	; (8000314 <__NVIC_SetPriority+0x4c>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	0112      	lsls	r2, r2, #4
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	440b      	add	r3, r1
 80002ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f0:	e00a      	b.n	8000308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <__NVIC_SetPriority+0x50>)
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	f003 030f 	and.w	r3, r3, #15
 80002fe:	3b04      	subs	r3, #4
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	440b      	add	r3, r1
 8000306:	761a      	strb	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800031c:	b480      	push	{r7}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	f1c3 0307 	rsb	r3, r3, #7
 8000336:	2b04      	cmp	r3, #4
 8000338:	bf28      	it	cs
 800033a:	2304      	movcs	r3, #4
 800033c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3304      	adds	r3, #4
 8000342:	2b06      	cmp	r3, #6
 8000344:	d902      	bls.n	800034c <NVIC_EncodePriority+0x30>
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3b03      	subs	r3, #3
 800034a:	e000      	b.n	800034e <NVIC_EncodePriority+0x32>
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	f04f 32ff 	mov.w	r2, #4294967295
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	43da      	mvns	r2, r3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	401a      	ands	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000364:	f04f 31ff 	mov.w	r1, #4294967295
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43d9      	mvns	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	4313      	orrs	r3, r2
         );
}
 8000376:	4618      	mov	r0, r3
 8000378:	3724      	adds	r7, #36	; 0x24
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <LL_RCC_SetUSARTClockSource+0x30>)
 800038e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	0c1b      	lsrs	r3, r3, #16
 8000396:	43db      	mvns	r3, r3
 8000398:	401a      	ands	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	b29b      	uxth	r3, r3
 800039e:	4905      	ldr	r1, [pc, #20]	; (80003b4 <LL_RCC_SetUSARTClockSource+0x30>)
 80003a0:	4313      	orrs	r3, r2
 80003a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000

080003b8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003c4:	4907      	ldr	r1, [pc, #28]	; (80003e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4013      	ands	r3, r2
 80003d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003d6:	68fb      	ldr	r3, [r7, #12]
}
 80003d8:	bf00      	nop
 80003da:	3714      	adds	r7, #20
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4013      	ands	r3, r2
 8000404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000406:	68fb      	ldr	r3, [r7, #12]
}
 8000408:	bf00      	nop
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000

08000418 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f043 0201 	orr.w	r2, r3, #1
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	601a      	str	r2, [r3, #0]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	609a      	str	r2, [r3, #8]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	69db      	ldr	r3, [r3, #28]
 8000470:	f003 0320 	and.w	r3, r3, #32
 8000474:	2b20      	cmp	r3, #32
 8000476:	d101      	bne.n	800047c <LL_USART_IsActiveFlag_RXNE+0x18>
 8000478:	2301      	movs	r3, #1
 800047a:	e000      	b.n	800047e <LL_USART_IsActiveFlag_RXNE+0x1a>
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800049a:	2b40      	cmp	r3, #64	; 0x40
 800049c:	d101      	bne.n	80004a2 <LL_USART_IsActiveFlag_TC+0x18>
 800049e:	2301      	movs	r3, #1
 80004a0:	e000      	b.n	80004a4 <LL_USART_IsActiveFlag_TC+0x1a>
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004c0:	2b80      	cmp	r3, #128	; 0x80
 80004c2:	d101      	bne.n	80004c8 <LL_USART_IsActiveFlag_TXE+0x18>
 80004c4:	2301      	movs	r3, #1
 80004c6:	e000      	b.n	80004ca <LL_USART_IsActiveFlag_TXE+0x1a>
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b089      	sub	sp, #36	; 0x24
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	e853 3f00 	ldrex	r3, [r3]
 80004e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	f043 0320 	orr.w	r3, r3, #32
 80004f0:	61fb      	str	r3, [r7, #28]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	69fa      	ldr	r2, [r7, #28]
 80004f6:	61ba      	str	r2, [r7, #24]
 80004f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80004fa:	6979      	ldr	r1, [r7, #20]
 80004fc:	69ba      	ldr	r2, [r7, #24]
 80004fe:	e841 2300 	strex	r3, r2, [r1]
 8000502:	613b      	str	r3, [r7, #16]
   return(result);
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1e9      	bne.n	80004de <LL_USART_EnableIT_RXNE+0x8>
}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	3724      	adds	r7, #36	; 0x24
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000524:	b29b      	uxth	r3, r3
 8000526:	b2db      	uxtb	r3, r3
}
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	b29a      	uxth	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <_write>:

#include "communication.h"



int _write(int file, uint8_t *buf, int nbytes){
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  uint8_t num_of_byte = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	75fb      	strb	r3, [r7, #23]
  while (num_of_byte <= nbytes - 1){
 8000564:	e011      	b.n	800058a <_write+0x36>
    while (!LL_USART_IsActiveFlag_TXE(USART2));
 8000566:	bf00      	nop
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <_write+0x58>)
 800056a:	f7ff ffa1 	bl	80004b0 <LL_USART_IsActiveFlag_TXE>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0f9      	beq.n	8000568 <_write+0x14>
    LL_USART_TransmitData8(USART2, buf[num_of_byte++]);
 8000574:	7dfb      	ldrb	r3, [r7, #23]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	75fa      	strb	r2, [r7, #23]
 800057a:	461a      	mov	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4413      	add	r3, r2
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <_write+0x58>)
 8000586:	f7ff ffd5 	bl	8000534 <LL_USART_TransmitData8>
  while (num_of_byte <= nbytes - 1){
 800058a:	7dfb      	ldrb	r3, [r7, #23]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	dce9      	bgt.n	8000566 <_write+0x12>
  }
  while (!LL_USART_IsActiveFlag_TC(USART2));
 8000592:	bf00      	nop
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <_write+0x58>)
 8000596:	f7ff ff78 	bl	800048a <LL_USART_IsActiveFlag_TC>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f9      	beq.n	8000594 <_write+0x40>
  return nbytes;
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40004400 	.word	0x40004400

080005b0 <USART2_IRQHandler>:



void USART2_IRQHandler(void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	uint8_t received_byte;
	if(LL_USART_IsActiveFlag_RXNE(USART2)){
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <USART2_IRQHandler+0x2c>)
 80005b8:	f7ff ff54 	bl	8000464 <LL_USART_IsActiveFlag_RXNE>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d008      	beq.n	80005d4 <USART2_IRQHandler+0x24>
	  received_byte = LL_USART_ReceiveData8(USART2);
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <USART2_IRQHandler+0x2c>)
 80005c4:	f7ff ffa8 	bl	8000518 <LL_USART_ReceiveData8>
 80005c8:	4603      	mov	r3, r0
 80005ca:	71fb      	strb	r3, [r7, #7]
	  usart_append(received_byte);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f9ea 	bl	80009a8 <usart_append>
	}
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40004400 	.word	0x40004400

080005e0 <usart2_init>:
	}
	num_of_byte = 0;
}


void usart2_init(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	; 0x38
 80005e4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	619a      	str	r2, [r3, #24]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800060a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800060e:	f7ff feb9 	bl	8000384 <LL_RCC_SetUSARTClockSource>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000612:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000616:	f7ff fee7 	bl	80003e8 <LL_APB1_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff fecc 	bl	80003b8 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000620:	230c      	movs	r3, #12
 8000622:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000624:	2302      	movs	r3, #2
 8000626:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000634:	2307      	movs	r3, #7
 8000636:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000640:	f002 f80f 	bl	8002662 <LL_GPIO_Init>

  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000644:	f7ff fe14 	bl	8000270 <__NVIC_GetPriorityGrouping>
 8000648:	4603      	mov	r3, r0
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fe64 	bl	800031c <NVIC_EncodePriority>
 8000654:	4603      	mov	r3, r0
 8000656:	4619      	mov	r1, r3
 8000658:	2026      	movs	r0, #38	; 0x26
 800065a:	f7ff fe35 	bl	80002c8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 800065e:	2026      	movs	r0, #38	; 0x26
 8000660:	f7ff fe14 	bl	800028c <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8000664:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000668:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000672:	2300      	movs	r3, #0
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000676:	230c      	movs	r3, #12
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800067a:	2300      	movs	r3, #0
 800067c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800067e:	2300      	movs	r3, #0
 8000680:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <usart2_init+0xc8>)
 800068a:	f002 fc87 	bl	8002f9c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <usart2_init+0xc8>)
 8000690:	f7ff fed2 	bl	8000438 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <usart2_init+0xc8>)
 8000696:	f7ff febf 	bl	8000418 <LL_USART_Enable>
  LL_USART_EnableIT_RXNE(USART2);
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <usart2_init+0xc8>)
 800069c:	f7ff ff1b 	bl	80004d6 <LL_USART_EnableIT_RXNE>

}
 80006a0:	bf00      	nop
 80006a2:	3738      	adds	r7, #56	; 0x38
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40004400 	.word	0x40004400

080006ac <LL_RCC_MSI_Enable>:
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <LL_RCC_MSI_Enable+0x1c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <LL_RCC_MSI_Enable+0x1c>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <LL_RCC_MSI_IsReady>:
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <LL_RCC_MSI_IsReady+0x20>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 0302 	and.w	r3, r3, #2
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d101      	bne.n	80006e0 <LL_RCC_MSI_IsReady+0x14>
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <LL_RCC_MSI_IsReady+0x16>
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	.word	0x40021000

080006f0 <LL_RCC_MSI_EnableRangeSelection>:
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000

08000710 <LL_RCC_MSI_SetRange>:
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <LL_RCC_MSI_SetRange+0x24>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <LL_RCC_MSI_SetRange+0x24>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	600b      	str	r3, [r1, #0]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	40021000 	.word	0x40021000

08000738 <LL_RCC_MSI_SetCalibTrimming>:
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	4904      	ldr	r1, [pc, #16]	; (8000760 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800074e:	4313      	orrs	r3, r2
 8000750:	604b      	str	r3, [r1, #4]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <LL_RCC_SetSysClkSource>:
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <LL_RCC_SetSysClkSource+0x24>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f023 0203 	bic.w	r2, r3, #3
 8000774:	4904      	ldr	r1, [pc, #16]	; (8000788 <LL_RCC_SetSysClkSource+0x24>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4313      	orrs	r3, r2
 800077a:	608b      	str	r3, [r1, #8]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000

0800078c <LL_RCC_GetSysClkSource>:
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <LL_RCC_GetSysClkSource+0x18>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	f003 030c 	and.w	r3, r3, #12
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <LL_RCC_SetAHBPrescaler>:
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <LL_RCC_SetAHBPrescaler+0x24>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007b8:	4904      	ldr	r1, [pc, #16]	; (80007cc <LL_RCC_SetAHBPrescaler+0x24>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4313      	orrs	r3, r2
 80007be:	608b      	str	r3, [r1, #8]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	40021000 	.word	0x40021000

080007d0 <LL_RCC_SetAPB1Prescaler>:
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80007e0:	4904      	ldr	r1, [pc, #16]	; (80007f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	608b      	str	r3, [r1, #8]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	40021000 	.word	0x40021000

080007f8 <LL_RCC_SetAPB2Prescaler>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000808:	4904      	ldr	r1, [pc, #16]	; (800081c <LL_RCC_SetAPB2Prescaler+0x24>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	608b      	str	r3, [r1, #8]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000

08000820 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <LL_RCC_PLL_Enable+0x1c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <LL_RCC_PLL_Enable+0x1c>)
 800082a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <LL_RCC_PLL_IsReady+0x24>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800084c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000850:	d101      	bne.n	8000856 <LL_RCC_PLL_IsReady+0x16>
 8000852:	2301      	movs	r3, #1
 8000854:	e000      	b.n	8000858 <LL_RCC_PLL_IsReady+0x18>
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800087c:	4013      	ands	r3, r2
 800087e:	68f9      	ldr	r1, [r7, #12]
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	4311      	orrs	r1, r2
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	0212      	lsls	r2, r2, #8
 8000888:	4311      	orrs	r1, r2
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	430a      	orrs	r2, r1
 800088e:	4904      	ldr	r1, [pc, #16]	; (80008a0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000890:	4313      	orrs	r3, r2
 8000892:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000
 80008a4:	f9ff808c 	.word	0xf9ff808c

080008a8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80008b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <LL_AHB2_GRP1_EnableClock>:
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d4:	4907      	ldr	r1, [pc, #28]	; (80008f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4313      	orrs	r3, r2
 80008da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4013      	ands	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000

080008f8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <LL_FLASH_SetLatency+0x24>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f023 0207 	bic.w	r2, r3, #7
 8000908:	4904      	ldr	r1, [pc, #16]	; (800091c <LL_FLASH_SetLatency+0x24>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4313      	orrs	r3, r2
 800090e:	600b      	str	r3, [r1, #0]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	40022000 	.word	0x40022000

08000920 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <LL_FLASH_GetLatency+0x18>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 0307 	and.w	r3, r3, #7
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40022000 	.word	0x40022000

0800093c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	600b      	str	r3, [r1, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	40007000 	.word	0x40007000

08000964 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000974:	d101      	bne.n	800097a <LL_PWR_IsActiveFlag_VOS+0x16>
 8000976:	2301      	movs	r3, #1
 8000978:	e000      	b.n	800097c <LL_PWR_IsActiveFlag_VOS+0x18>
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40007000 	.word	0x40007000

0800098c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <usart_append>:
uint8_t TxData[8] = {0};
uint8_t RxData[8] = {0};

uint32_t TxMailbox;

void usart_append(uint8_t value){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	static char line_buffer_usart[LINE_MAX_LENGTH + 1];
	static uint8_t line_length_usart = 0;

	if(value == '\r'){
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b0d      	cmp	r3, #13
 80009b6:	d116      	bne.n	80009e6 <usart_append+0x3e>
		line_buffer_usart[line_length_usart] = '\0';
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <usart_append+0x68>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <usart_append+0x6c>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	5499      	strb	r1, [r3, r2]
		printf("Received: %s\r\n", line_buffer_usart);
 80009c4:	4913      	ldr	r1, [pc, #76]	; (8000a14 <usart_append+0x6c>)
 80009c6:	4814      	ldr	r0, [pc, #80]	; (8000a18 <usart_append+0x70>)
 80009c8:	f002 fc36 	bl	8003238 <iprintf>
		strcpy((char *)uart_command, line_buffer_usart);
 80009cc:	4911      	ldr	r1, [pc, #68]	; (8000a14 <usart_append+0x6c>)
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <usart_append+0x74>)
 80009d0:	f002 fe05 	bl	80035de <strcpy>
		memset(line_buffer_usart, '\0', LINE_MAX_LENGTH);
 80009d4:	2232      	movs	r2, #50	; 0x32
 80009d6:	2100      	movs	r1, #0
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <usart_append+0x6c>)
 80009da:	f002 fd73 	bl	80034c4 <memset>
		line_length_usart = 0;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <usart_append+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		if (line_length_usart >= LINE_MAX_LENGTH) {
			line_length_usart = 0;
		}
		line_buffer_usart[line_length_usart++] = value;
	}
}
 80009e4:	e010      	b.n	8000a08 <usart_append+0x60>
		if (line_length_usart >= LINE_MAX_LENGTH) {
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <usart_append+0x68>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b31      	cmp	r3, #49	; 0x31
 80009ec:	d902      	bls.n	80009f4 <usart_append+0x4c>
			line_length_usart = 0;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <usart_append+0x68>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
		line_buffer_usart[line_length_usart++] = value;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <usart_append+0x68>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	b2d1      	uxtb	r1, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <usart_append+0x68>)
 80009fe:	7011      	strb	r1, [r2, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <usart_append+0x6c>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	5453      	strb	r3, [r2, r1]
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000128 	.word	0x20000128
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	08004024 	.word	0x08004024
 8000a1c:	200000ac 	.word	0x200000ac

08000a20 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000a30:	f000 fe99 	bl	8001766 <HAL_CAN_GetRxMessage>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000011c 	.word	0x2000011c
 8000a40:	200000f8 	.word	0x200000f8
 8000a44:	20000084 	.word	0x20000084

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f000 fb18 	bl	8001082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f8c5 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a56:	f000 f96b 	bl	8000d30 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000a5a:	f000 f917 	bl	8000c8c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000a5e:	4854      	ldr	r0, [pc, #336]	; (8000bb0 <main+0x168>)
 8000a60:	f000 fd6d 	bl	800153e <HAL_CAN_Start>
  usart2_init();
 8000a64:	f7ff fdbc 	bl	80005e0 <usart2_init>



  TxHeader.IDE = CAN_ID_STD;
 8000a68:	4b52      	ldr	r3, [pc, #328]	; (8000bb4 <main+0x16c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000a6e:	4b51      	ldr	r3, [pc, #324]	; (8000bb4 <main+0x16c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]


  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a74:	2102      	movs	r1, #2
 8000a76:	484e      	ldr	r0, [pc, #312]	; (8000bb0 <main+0x168>)
 8000a78:	f000 ff97 	bl	80019aa <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Siemanderko\r\n");
 8000a7c:	484e      	ldr	r0, [pc, #312]	; (8000bb8 <main+0x170>)
 8000a7e:	f002 fc41 	bl	8003304 <puts>
  TxHeader.StdId = 0x101;
 8000a82:	4b4c      	ldr	r3, [pc, #304]	; (8000bb4 <main+0x16c>)
 8000a84:	f240 1201 	movw	r2, #257	; 0x101
 8000a88:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 1;
 8000a8a:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <main+0x16c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	611a      	str	r2, [r3, #16]
	TxData[0] = 11;
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <main+0x174>)
 8000a92:	220b      	movs	r2, #11
 8000a94:	701a      	strb	r2, [r3, #0]
//	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
  while (1){
  	if(!strncmp((const char*)uart_command, "cm1", 3)){ //comand that awaits for answer
 8000a96:	2203      	movs	r2, #3
 8000a98:	4949      	ldr	r1, [pc, #292]	; (8000bc0 <main+0x178>)
 8000a9a:	484a      	ldr	r0, [pc, #296]	; (8000bc4 <main+0x17c>)
 8000a9c:	f002 fd1a 	bl	80034d4 <strncmp>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d11e      	bne.n	8000ae4 <main+0x9c>
  		TxHeader.StdId = 0x101;
 8000aa6:	4b43      	ldr	r3, [pc, #268]	; (8000bb4 <main+0x16c>)
 8000aa8:	f240 1201 	movw	r2, #257	; 0x101
 8000aac:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = 1;
 8000aae:	4b41      	ldr	r3, [pc, #260]	; (8000bb4 <main+0x16c>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	611a      	str	r2, [r3, #16]
			TxData[0] = 11;
 8000ab4:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <main+0x174>)
 8000ab6:	220b      	movs	r2, #11
 8000ab8:	701a      	strb	r2, [r3, #0]
  		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000aba:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <main+0x180>)
 8000abc:	4a3f      	ldr	r2, [pc, #252]	; (8000bbc <main+0x174>)
 8000abe:	493d      	ldr	r1, [pc, #244]	; (8000bb4 <main+0x16c>)
 8000ac0:	483b      	ldr	r0, [pc, #236]	; (8000bb0 <main+0x168>)
 8000ac2:	f000 fd80 	bl	80015c6 <HAL_CAN_AddTxMessage>
  		HAL_Delay(10);
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f000 fb50 	bl	800116c <HAL_Delay>
  		printf("Got an answer: %d \r\n", RxData[0]);
 8000acc:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <main+0x184>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	483f      	ldr	r0, [pc, #252]	; (8000bd0 <main+0x188>)
 8000ad4:	f002 fbb0 	bl	8003238 <iprintf>
  		memset(uart_command, '\0', LINE_MAX_LENGTH);
 8000ad8:	2232      	movs	r2, #50	; 0x32
 8000ada:	2100      	movs	r1, #0
 8000adc:	4839      	ldr	r0, [pc, #228]	; (8000bc4 <main+0x17c>)
 8000ade:	f002 fcf1 	bl	80034c4 <memset>
 8000ae2:	e7d8      	b.n	8000a96 <main+0x4e>
  	}
  	else if(!strncmp((const char*)uart_command, "cm2", 3)){ //command that tells how many times it needs to blink
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	493b      	ldr	r1, [pc, #236]	; (8000bd4 <main+0x18c>)
 8000ae8:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <main+0x17c>)
 8000aea:	f002 fcf3 	bl	80034d4 <strncmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d12c      	bne.n	8000b4e <main+0x106>
  		uint8_t s_delay = uart_command[4];
 8000af4:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <main+0x17c>)
 8000af6:	791b      	ldrb	r3, [r3, #4]
 8000af8:	717b      	strb	r3, [r7, #5]
  		uint8_t blink_amount = uart_command[6];
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <main+0x17c>)
 8000afc:	799b      	ldrb	r3, [r3, #6]
 8000afe:	713b      	strb	r3, [r7, #4]
  		if(s_delay && blink_amount){
 8000b00:	797b      	ldrb	r3, [r7, #5]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d01a      	beq.n	8000b3c <main+0xf4>
 8000b06:	793b      	ldrb	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d017      	beq.n	8000b3c <main+0xf4>
  			TxHeader.StdId = 0x102;
 8000b0c:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <main+0x16c>)
 8000b0e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000b12:	601a      	str	r2, [r3, #0]
				TxHeader.DLC = 2;
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <main+0x16c>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	611a      	str	r2, [r3, #16]
				TxData[0] = s_delay - 48;
 8000b1a:	797b      	ldrb	r3, [r7, #5]
 8000b1c:	3b30      	subs	r3, #48	; 0x30
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <main+0x174>)
 8000b22:	701a      	strb	r2, [r3, #0]
				TxData[1] = blink_amount - 48;
 8000b24:	793b      	ldrb	r3, [r7, #4]
 8000b26:	3b30      	subs	r3, #48	; 0x30
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <main+0x174>)
 8000b2c:	705a      	strb	r2, [r3, #1]
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <main+0x180>)
 8000b30:	4a22      	ldr	r2, [pc, #136]	; (8000bbc <main+0x174>)
 8000b32:	4920      	ldr	r1, [pc, #128]	; (8000bb4 <main+0x16c>)
 8000b34:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <main+0x168>)
 8000b36:	f000 fd46 	bl	80015c6 <HAL_CAN_AddTxMessage>
 8000b3a:	e002      	b.n	8000b42 <main+0xfa>
  		}
  		else
  			printf("An error in the command\r\n");
 8000b3c:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <main+0x190>)
 8000b3e:	f002 fbe1 	bl	8003304 <puts>
  		memset(uart_command, '\0', LINE_MAX_LENGTH);
 8000b42:	2232      	movs	r2, #50	; 0x32
 8000b44:	2100      	movs	r1, #0
 8000b46:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <main+0x17c>)
 8000b48:	f002 fcbc 	bl	80034c4 <memset>
 8000b4c:	e7a3      	b.n	8000a96 <main+0x4e>
  	}
  	else if(!strncmp((const char*)uart_command, "cm3", 3)){ //command that gets ignored, cause of bad id
 8000b4e:	2203      	movs	r2, #3
 8000b50:	4922      	ldr	r1, [pc, #136]	; (8000bdc <main+0x194>)
 8000b52:	481c      	ldr	r0, [pc, #112]	; (8000bc4 <main+0x17c>)
 8000b54:	f002 fcbe 	bl	80034d4 <strncmp>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d19b      	bne.n	8000a96 <main+0x4e>
  		uint8_t s_delay = uart_command[4];
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <main+0x17c>)
 8000b60:	791b      	ldrb	r3, [r3, #4]
 8000b62:	71fb      	strb	r3, [r7, #7]
			uint8_t blink_amount = uart_command[6];
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <main+0x17c>)
 8000b66:	799b      	ldrb	r3, [r3, #6]
 8000b68:	71bb      	strb	r3, [r7, #6]
			if(s_delay && blink_amount){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d015      	beq.n	8000b9c <main+0x154>
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d012      	beq.n	8000b9c <main+0x154>
				TxHeader.StdId = 0x003;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <main+0x16c>)
 8000b78:	2203      	movs	r2, #3
 8000b7a:	601a      	str	r2, [r3, #0]
				TxHeader.DLC = 2;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <main+0x16c>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	611a      	str	r2, [r3, #16]
				TxData[0] = s_delay;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <main+0x174>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	7013      	strb	r3, [r2, #0]
				TxData[1] = blink_amount;
 8000b88:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <main+0x174>)
 8000b8a:	79bb      	ldrb	r3, [r7, #6]
 8000b8c:	7053      	strb	r3, [r2, #1]
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <main+0x180>)
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <main+0x174>)
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <main+0x16c>)
 8000b94:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <main+0x168>)
 8000b96:	f000 fd16 	bl	80015c6 <HAL_CAN_AddTxMessage>
 8000b9a:	e002      	b.n	8000ba2 <main+0x15a>
			}
			else
				printf("An error in the command\r\n");
 8000b9c:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <main+0x190>)
 8000b9e:	f002 fbb1 	bl	8003304 <puts>
			memset(uart_command, '\0', LINE_MAX_LENGTH);
 8000ba2:	2232      	movs	r2, #50	; 0x32
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <main+0x17c>)
 8000ba8:	f002 fc8c 	bl	80034c4 <memset>
  	if(!strncmp((const char*)uart_command, "cm1", 3)){ //comand that awaits for answer
 8000bac:	e773      	b.n	8000a96 <main+0x4e>
 8000bae:	bf00      	nop
 8000bb0:	20000084 	.word	0x20000084
 8000bb4:	200000e0 	.word	0x200000e0
 8000bb8:	08004034 	.word	0x08004034
 8000bbc:	20000114 	.word	0x20000114
 8000bc0:	08004044 	.word	0x08004044
 8000bc4:	200000ac 	.word	0x200000ac
 8000bc8:	20000124 	.word	0x20000124
 8000bcc:	2000011c 	.word	0x2000011c
 8000bd0:	08004048 	.word	0x08004048
 8000bd4:	08004060 	.word	0x08004060
 8000bd8:	08004064 	.word	0x08004064
 8000bdc:	08004080 	.word	0x08004080

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000be4:	2004      	movs	r0, #4
 8000be6:	f7ff fe87 	bl	80008f8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000bea:	bf00      	nop
 8000bec:	f7ff fe98 	bl	8000920 <LL_FLASH_GetLatency>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d1fa      	bne.n	8000bec <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000bf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bfa:	f7ff fe9f 	bl	800093c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000bfe:	bf00      	nop
 8000c00:	f7ff feb0 	bl	8000964 <LL_PWR_IsActiveFlag_VOS>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1fa      	bne.n	8000c00 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8000c0a:	f7ff fd4f 	bl	80006ac <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000c0e:	bf00      	nop
 8000c10:	f7ff fd5c 	bl	80006cc <LL_RCC_MSI_IsReady>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d1fa      	bne.n	8000c10 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000c1a:	f7ff fd69 	bl	80006f0 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000c1e:	2060      	movs	r0, #96	; 0x60
 8000c20:	f7ff fd76 	bl	8000710 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fd87 	bl	8000738 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2228      	movs	r2, #40	; 0x28
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff fe19 	bl	8000868 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000c36:	f7ff fe37 	bl	80008a8 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000c3a:	f7ff fdf1 	bl	8000820 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000c3e:	bf00      	nop
 8000c40:	f7ff fdfe 	bl	8000840 <LL_RCC_PLL_IsReady>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d1fa      	bne.n	8000c40 <SystemClock_Config+0x60>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f7ff fd8a 	bl	8000764 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c50:	bf00      	nop
 8000c52:	f7ff fd9b 	bl	800078c <LL_RCC_GetSysClkSource>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b0c      	cmp	r3, #12
 8000c5a:	d1fa      	bne.n	8000c52 <SystemClock_Config+0x72>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff fda3 	bl	80007a8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fdb4 	bl	80007d0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff fdc5 	bl	80007f8 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <SystemClock_Config+0xa8>)
 8000c70:	f002 fa10 	bl	8003094 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000c74:	200f      	movs	r0, #15
 8000c76:	f000 fa1d 	bl	80010b4 <HAL_InitTick>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c80:	f000 f880 	bl	8000d84 <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	04c4b400 	.word	0x04c4b400

08000c8c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000c94:	4a25      	ldr	r2, [pc, #148]	; (8000d2c <MX_CAN1_Init+0xa0>)
 8000c96:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ca4:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000cac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cdc:	4812      	ldr	r0, [pc, #72]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000cde:	f000 fa69 	bl	80011b4 <HAL_CAN_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ce8:	f000 f84c 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000cec:	2301      	movs	r3, #1
 8000cee:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 10;  // anything between 0 to SlaveStartFilterBank
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000d10:	230d      	movs	r3, #13
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_CAN1_Init+0x9c>)
 8000d1a:	f000 fb46 	bl	80013aa <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000084 	.word	0x20000084
 8000d2c:	40006400 	.word	0x40006400

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000d46:	2080      	movs	r0, #128	; 0x80
 8000d48:	f7ff fdbe 	bl	80008c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff fdbb 	bl	80008c8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000d52:	2120      	movs	r1, #32
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f7ff fe18 	bl	800098c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f001 fc73 	bl	8002662 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6613      	str	r3, [r2, #96]	; 0x60
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x44>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x44>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <HAL_CAN_MspInit+0xb4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d143      	bne.n	8000e82 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <HAL_CAN_MspInit+0xb8>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a24      	ldr	r2, [pc, #144]	; (8000e90 <HAL_CAN_MspInit+0xb8>)
 8000e00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <HAL_CAN_MspInit+0xb8>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <HAL_CAN_MspInit+0xb8>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <HAL_CAN_MspInit+0xb8>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_CAN_MspInit+0xb8>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e3c:	2309      	movs	r3, #9
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f001 f915 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e60:	2309      	movs	r3, #9
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f001 f903 	bl	8002078 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2014      	movs	r0, #20
 8000e78:	f001 f8c7 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e7c:	2014      	movs	r0, #20
 8000e7e:	f001 f8e0 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40006400 	.word	0x40006400
 8000e90:	40021000 	.word	0x40021000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f924 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <CAN1_RX0_IRQHandler+0x10>)
 8000eee:	f000 fd82 	bl	80019f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000084 	.word	0x20000084

08000efc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e00a      	b.n	8000f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0e:	f3af 8000 	nop.w
 8000f12:	4601      	mov	r1, r0
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	b2ca      	uxtb	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf0      	blt.n	8000f0e <_read+0x12>
  }

  return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_isatty>:

int _isatty(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f002 fad8 	bl	8003584 <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20018000 	.word	0x20018000
 8001000:	00000400 	.word	0x00000400
 8001004:	20000160 	.word	0x20000160
 8001008:	200002b8 	.word	0x200002b8

0800100c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff ffea 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f002 fa97 	bl	8003590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001062:	f7ff fcf1 	bl	8000a48 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001074:	08004108 	.word	0x08004108
  ldr r2, =_sbss
 8001078:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800107c:	200002b4 	.word	0x200002b4

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>

08001082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 ffb1 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f80e 	bl	80010b4 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e001      	b.n	80010a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a4:	f7ff fe74 	bl	8000d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_InitTick+0x6c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_InitTick+0x70>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_InitTick+0x6c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 ffbd 	bl	800205e <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d809      	bhi.n	8001104 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 ff87 	bl	800200a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_InitTick+0x74>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e007      	b.n	8001114 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e004      	b.n	8001114 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e001      	b.n	8001114 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	20000000 	.word	0x20000000
 8001128:	20000004 	.word	0x20000004

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008
 8001150:	20000164 	.word	0x20000164

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000164 	.word	0x20000164

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008

080011b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0ed      	b.n	80013a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fe00 	bl	8000dd8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e8:	f7ff ffb4 	bl	8001154 <HAL_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ee:	e012      	b.n	8001216 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f0:	f7ff ffb0 	bl	8001154 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d90b      	bls.n	8001216 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2205      	movs	r2, #5
 800120e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0c5      	b.n	80013a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0e5      	beq.n	80011f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0202 	bic.w	r2, r2, #2
 8001232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff ff8e 	bl	8001154 <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800123a:	e012      	b.n	8001262 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800123c:	f7ff ff8a 	bl	8001154 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b0a      	cmp	r3, #10
 8001248:	d90b      	bls.n	8001262 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2205      	movs	r2, #5
 800125a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e09f      	b.n	80013a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e5      	bne.n	800123c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7e1b      	ldrb	r3, [r3, #24]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d108      	bne.n	800128a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e007      	b.n	800129a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7e5b      	ldrb	r3, [r3, #25]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d108      	bne.n	80012b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e007      	b.n	80012c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e9b      	ldrb	r3, [r3, #26]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d108      	bne.n	80012de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0220 	orr.w	r2, r2, #32
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e007      	b.n	80012ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0220 	bic.w	r2, r2, #32
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7edb      	ldrb	r3, [r3, #27]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d108      	bne.n	8001308 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0210 	bic.w	r2, r2, #16
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e007      	b.n	8001318 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0210 	orr.w	r2, r2, #16
 8001316:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7f1b      	ldrb	r3, [r3, #28]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0208 	orr.w	r2, r2, #8
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e007      	b.n	8001342 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0208 	bic.w	r2, r2, #8
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7f5b      	ldrb	r3, [r3, #29]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0204 	orr.w	r2, r2, #4
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e007      	b.n	800136c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0204 	bic.w	r2, r2, #4
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	ea42 0103 	orr.w	r1, r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	1e5a      	subs	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013c2:	7cfb      	ldrb	r3, [r7, #19]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d003      	beq.n	80013d0 <HAL_CAN_ConfigFilter+0x26>
 80013c8:	7cfb      	ldrb	r3, [r7, #19]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	f040 80aa 	bne.w	8001524 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2201      	movs	r2, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d123      	bne.n	8001452 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	43db      	mvns	r3, r3
 8001414:	401a      	ands	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800142c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3248      	adds	r2, #72	; 0x48
 8001432:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001446:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001448:	6979      	ldr	r1, [r7, #20]
 800144a:	3348      	adds	r3, #72	; 0x48
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d122      	bne.n	80014a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	431a      	orrs	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800147a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3248      	adds	r2, #72	; 0x48
 8001480:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001494:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001496:	6979      	ldr	r1, [r7, #20]
 8001498:	3348      	adds	r3, #72	; 0x48
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d109      	bne.n	80014bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014ba:	e007      	b.n	80014cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014e6:	e007      	b.n	80014f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d107      	bne.n	8001510 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	431a      	orrs	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001516:	f023 0201 	bic.w	r2, r3, #1
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	e006      	b.n	8001532 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
  }
}
 8001532:	4618      	mov	r0, r3
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b01      	cmp	r3, #1
 8001550:	d12e      	bne.n	80015b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2202      	movs	r2, #2
 8001556:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0201 	bic.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800156a:	f7ff fdf3 	bl	8001154 <HAL_GetTick>
 800156e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001570:	e012      	b.n	8001598 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001572:	f7ff fdef 	bl	8001154 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b0a      	cmp	r3, #10
 800157e:	d90b      	bls.n	8001598 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2205      	movs	r2, #5
 8001590:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e012      	b.n	80015be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1e5      	bne.n	8001572 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e006      	b.n	80015be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
  }
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b089      	sub	sp, #36	; 0x24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015e4:	7ffb      	ldrb	r3, [r7, #31]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d003      	beq.n	80015f2 <HAL_CAN_AddTxMessage+0x2c>
 80015ea:	7ffb      	ldrb	r3, [r7, #31]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	f040 80ad 	bne.w	800174c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10a      	bne.n	8001612 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001602:	2b00      	cmp	r3, #0
 8001604:	d105      	bne.n	8001612 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8095 	beq.w	800173c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	0e1b      	lsrs	r3, r3, #24
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800161c:	2201      	movs	r2, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	409a      	lsls	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10d      	bne.n	800164a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001638:	68f9      	ldr	r1, [r7, #12]
 800163a:	6809      	ldr	r1, [r1, #0]
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3318      	adds	r3, #24
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	440b      	add	r3, r1
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e00f      	b.n	800166a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001654:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800165a:	68f9      	ldr	r1, [r7, #12]
 800165c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800165e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3318      	adds	r3, #24
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	440b      	add	r3, r1
 8001668:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3318      	adds	r3, #24
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	440b      	add	r3, r1
 800167a:	3304      	adds	r3, #4
 800167c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	7d1b      	ldrb	r3, [r3, #20]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d111      	bne.n	80016aa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3318      	adds	r3, #24
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	4413      	add	r3, r2
 8001692:	3304      	adds	r3, #4
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	6811      	ldr	r1, [r2, #0]
 800169a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3318      	adds	r3, #24
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	440b      	add	r3, r1
 80016a6:	3304      	adds	r3, #4
 80016a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3307      	adds	r3, #7
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	061a      	lsls	r2, r3, #24
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3306      	adds	r3, #6
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3305      	adds	r3, #5
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	4313      	orrs	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	3204      	adds	r2, #4
 80016ca:	7812      	ldrb	r2, [r2, #0]
 80016cc:	4610      	mov	r0, r2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	6811      	ldr	r1, [r2, #0]
 80016d2:	ea43 0200 	orr.w	r2, r3, r0
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	440b      	add	r3, r1
 80016dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80016e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3303      	adds	r3, #3
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	061a      	lsls	r2, r3, #24
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3302      	adds	r3, #2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3301      	adds	r3, #1
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	4313      	orrs	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	4610      	mov	r0, r2
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	6811      	ldr	r1, [r2, #0]
 8001708:	ea43 0200 	orr.w	r2, r3, r0
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	440b      	add	r3, r1
 8001712:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001716:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3318      	adds	r3, #24
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4413      	add	r3, r2
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	6811      	ldr	r1, [r2, #0]
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3318      	adds	r3, #24
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	440b      	add	r3, r1
 8001736:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e00e      	b.n	800175a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e006      	b.n	800175a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001766:	b480      	push	{r7}
 8001768:	b087      	sub	sp, #28
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d003      	beq.n	800178a <HAL_CAN_GetRxMessage+0x24>
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	2b02      	cmp	r3, #2
 8001786:	f040 8103 	bne.w	8001990 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10e      	bne.n	80017ae <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d116      	bne.n	80017cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0f7      	b.n	800199e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0e8      	b.n	800199e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	331b      	adds	r3, #27
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0204 	and.w	r2, r3, #4
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	331b      	adds	r3, #27
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	4413      	add	r3, r2
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0d5b      	lsrs	r3, r3, #21
 80017fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e00b      	b.n	800181c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	331b      	adds	r3, #27
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	08db      	lsrs	r3, r3, #3
 8001814:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	331b      	adds	r3, #27
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0202 	and.w	r2, r3, #2
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	331b      	adds	r3, #27
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	4413      	add	r3, r2
 800183e:	3304      	adds	r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2208      	movs	r2, #8
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	e00b      	b.n	800186a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	331b      	adds	r3, #27
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	4413      	add	r3, r2
 800185e:	3304      	adds	r3, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 020f 	and.w	r2, r3, #15
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	331b      	adds	r3, #27
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	3304      	adds	r3, #4
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b2da      	uxtb	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	331b      	adds	r3, #27
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	3304      	adds	r3, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	0c1b      	lsrs	r3, r3, #16
 8001894:	b29a      	uxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	4413      	add	r3, r2
 80018a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0a1a      	lsrs	r2, r3, #8
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	0c1a      	lsrs	r2, r3, #16
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	3302      	adds	r3, #2
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0e1a      	lsrs	r2, r3, #24
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3303      	adds	r3, #3
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	4413      	add	r3, r2
 8001908:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3304      	adds	r3, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0a1a      	lsrs	r2, r3, #8
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	3305      	adds	r3, #5
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4413      	add	r3, r2
 800193a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0c1a      	lsrs	r2, r3, #16
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	3306      	adds	r3, #6
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0e1a      	lsrs	r2, r3, #24
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3307      	adds	r3, #7
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d108      	bne.n	800197c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0220 	orr.w	r2, r2, #32
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	e007      	b.n	800198c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0220 	orr.w	r2, r2, #32
 800198a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e006      	b.n	800199e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ba:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d002      	beq.n	80019c8 <HAL_CAN_ActivateNotification+0x1e>
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d109      	bne.n	80019dc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6959      	ldr	r1, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	e006      	b.n	80019ea <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b08a      	sub	sp, #40	; 0x28
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d07c      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d023      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f983 	bl	8001d64 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a5e:	e016      	b.n	8001a8e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
 8001a72:	e00c      	b.n	8001a8e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	e002      	b.n	8001a8e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f989 	bl	8001da0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d024      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f963 	bl	8001d78 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ab2:	e016      	b.n	8001ae2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac6:	e00c      	b.n	8001ae2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ada:	e002      	b.n	8001ae2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f969 	bl	8001db4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d024      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001af4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f943 	bl	8001d8c <HAL_CAN_TxMailbox2CompleteCallback>
 8001b06:	e016      	b.n	8001b36 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	e00c      	b.n	8001b36 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2e:	e002      	b.n	8001b36 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f949 	bl	8001dc8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00c      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2210      	movs	r2, #16
 8001b58:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00b      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2208      	movs	r2, #8
 8001b74:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f930 	bl	8001ddc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7fe ff43 	bl	8000a20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00c      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2210      	movs	r2, #16
 8001bbc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00b      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f912 	bl	8001e04 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f8f9 	bl	8001df0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00b      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8fc 	bl	8001e18 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2208      	movs	r2, #8
 8001c3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f8f5 	bl	8001e2c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d07b      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d072      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d043      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03e      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cc4:	2b60      	cmp	r3, #96	; 0x60
 8001cc6:	d02b      	beq.n	8001d20 <HAL_CAN_IRQHandler+0x32a>
 8001cc8:	2b60      	cmp	r3, #96	; 0x60
 8001cca:	d82e      	bhi.n	8001d2a <HAL_CAN_IRQHandler+0x334>
 8001ccc:	2b50      	cmp	r3, #80	; 0x50
 8001cce:	d022      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x320>
 8001cd0:	2b50      	cmp	r3, #80	; 0x50
 8001cd2:	d82a      	bhi.n	8001d2a <HAL_CAN_IRQHandler+0x334>
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d019      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x316>
 8001cd8:	2b40      	cmp	r3, #64	; 0x40
 8001cda:	d826      	bhi.n	8001d2a <HAL_CAN_IRQHandler+0x334>
 8001cdc:	2b30      	cmp	r3, #48	; 0x30
 8001cde:	d010      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x30c>
 8001ce0:	2b30      	cmp	r3, #48	; 0x30
 8001ce2:	d822      	bhi.n	8001d2a <HAL_CAN_IRQHandler+0x334>
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d002      	beq.n	8001cee <HAL_CAN_IRQHandler+0x2f8>
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d005      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cec:	e01d      	b.n	8001d2a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cf6:	e019      	b.n	8001d2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d00:	e014      	b.n	8001d2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	f043 0320 	orr.w	r3, r3, #32
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d0a:	e00f      	b.n	8001d2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d14:	e00a      	b.n	8001d2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d1e:	e005      	b.n	8001d2c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d28:	e000      	b.n	8001d2c <HAL_CAN_IRQHandler+0x336>
            break;
 8001d2a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d3a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2204      	movs	r2, #4
 8001d42:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d008      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f872 	bl	8001e40 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <__NVIC_SetPriorityGrouping>:
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff3e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff31 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002086:	e17f      	b.n	8002388 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8171 	beq.w	8002382 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d005      	beq.n	80020b8 <HAL_GPIO_Init+0x40>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d130      	bne.n	800211a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ee:	2201      	movs	r2, #1
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	f003 0201 	and.w	r2, r3, #1
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b03      	cmp	r3, #3
 8002124:	d118      	bne.n	8002158 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800212c:	2201      	movs	r2, #1
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	4013      	ands	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	f003 0201 	and.w	r2, r3, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d017      	beq.n	8002194 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d123      	bne.n	80021e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	6939      	ldr	r1, [r7, #16]
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80ac 	beq.w	8002382 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	4b5f      	ldr	r3, [pc, #380]	; (80023a8 <HAL_GPIO_Init+0x330>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	4a5e      	ldr	r2, [pc, #376]	; (80023a8 <HAL_GPIO_Init+0x330>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6613      	str	r3, [r2, #96]	; 0x60
 8002236:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_GPIO_Init+0x330>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002242:	4a5a      	ldr	r2, [pc, #360]	; (80023ac <HAL_GPIO_Init+0x334>)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800226c:	d025      	beq.n	80022ba <HAL_GPIO_Init+0x242>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4f      	ldr	r2, [pc, #316]	; (80023b0 <HAL_GPIO_Init+0x338>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01f      	beq.n	80022b6 <HAL_GPIO_Init+0x23e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4e      	ldr	r2, [pc, #312]	; (80023b4 <HAL_GPIO_Init+0x33c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d019      	beq.n	80022b2 <HAL_GPIO_Init+0x23a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4d      	ldr	r2, [pc, #308]	; (80023b8 <HAL_GPIO_Init+0x340>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_GPIO_Init+0x236>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4c      	ldr	r2, [pc, #304]	; (80023bc <HAL_GPIO_Init+0x344>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00d      	beq.n	80022aa <HAL_GPIO_Init+0x232>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4b      	ldr	r2, [pc, #300]	; (80023c0 <HAL_GPIO_Init+0x348>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <HAL_GPIO_Init+0x22e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4a      	ldr	r2, [pc, #296]	; (80023c4 <HAL_GPIO_Init+0x34c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_GPIO_Init+0x22a>
 800229e:	2306      	movs	r3, #6
 80022a0:	e00c      	b.n	80022bc <HAL_GPIO_Init+0x244>
 80022a2:	2307      	movs	r3, #7
 80022a4:	e00a      	b.n	80022bc <HAL_GPIO_Init+0x244>
 80022a6:	2305      	movs	r3, #5
 80022a8:	e008      	b.n	80022bc <HAL_GPIO_Init+0x244>
 80022aa:	2304      	movs	r3, #4
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x244>
 80022ae:	2303      	movs	r3, #3
 80022b0:	e004      	b.n	80022bc <HAL_GPIO_Init+0x244>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e002      	b.n	80022bc <HAL_GPIO_Init+0x244>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_GPIO_Init+0x244>
 80022ba:	2300      	movs	r3, #0
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	f002 0203 	and.w	r2, r2, #3
 80022c2:	0092      	lsls	r2, r2, #2
 80022c4:	4093      	lsls	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022cc:	4937      	ldr	r1, [pc, #220]	; (80023ac <HAL_GPIO_Init+0x334>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_GPIO_Init+0x350>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022fe:	4a32      	ldr	r2, [pc, #200]	; (80023c8 <HAL_GPIO_Init+0x350>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002304:	4b30      	ldr	r3, [pc, #192]	; (80023c8 <HAL_GPIO_Init+0x350>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_GPIO_Init+0x350>)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_GPIO_Init+0x350>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	43db      	mvns	r3, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002352:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <HAL_GPIO_Init+0x350>)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_GPIO_Init+0x350>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800237c:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <HAL_GPIO_Init+0x350>)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	f47f ae78 	bne.w	8002088 <HAL_GPIO_Init+0x10>
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40010000 	.word	0x40010000
 80023b0:	48000400 	.word	0x48000400
 80023b4:	48000800 	.word	0x48000800
 80023b8:	48000c00 	.word	0x48000c00
 80023bc:	48001000 	.word	0x48001000
 80023c0:	48001400 	.word	0x48001400
 80023c4:	48001800 	.word	0x48001800
 80023c8:	40010400 	.word	0x40010400

080023cc <LL_GPIO_SetPinMode>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b08b      	sub	sp, #44	; 0x2c
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	613b      	str	r3, [r7, #16]
  return result;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80023f2:	2320      	movs	r3, #32
 80023f4:	e003      	b.n	80023fe <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2103      	movs	r1, #3
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	401a      	ands	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	61fb      	str	r3, [r7, #28]
  return result;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e003      	b.n	800242c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	431a      	orrs	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	601a      	str	r2, [r3, #0]
}
 800243a:	bf00      	nop
 800243c:	372c      	adds	r7, #44	; 0x2c
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_GPIO_SetPinOutputType>:
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	43db      	mvns	r3, r3
 800245a:	401a      	ands	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	605a      	str	r2, [r3, #4]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_GPIO_SetPinSpeed>:
{
 8002476:	b480      	push	{r7}
 8002478:	b08b      	sub	sp, #44	; 0x2c
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	613b      	str	r3, [r7, #16]
  return result;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800249c:	2320      	movs	r3, #32
 800249e:	e003      	b.n	80024a8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2103      	movs	r1, #3
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	401a      	ands	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	61fb      	str	r3, [r7, #28]
  return result;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80024ca:	2320      	movs	r3, #32
 80024cc:	e003      	b.n	80024d6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	431a      	orrs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]
}
 80024e4:	bf00      	nop
 80024e6:	372c      	adds	r7, #44	; 0x2c
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_GPIO_SetPinPull>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	b08b      	sub	sp, #44	; 0x2c
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	613b      	str	r3, [r7, #16]
  return result;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e003      	b.n	8002522 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2103      	movs	r1, #3
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	401a      	ands	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	61fb      	str	r3, [r7, #28]
  return result;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002544:	2320      	movs	r3, #32
 8002546:	e003      	b.n	8002550 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	431a      	orrs	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	60da      	str	r2, [r3, #12]
}
 800255e:	bf00      	nop
 8002560:	372c      	adds	r7, #44	; 0x2c
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_GPIO_SetAFPin_0_7>:
{
 800256a:	b480      	push	{r7}
 800256c:	b08b      	sub	sp, #44	; 0x2c
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a1a      	ldr	r2, [r3, #32]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	613b      	str	r3, [r7, #16]
  return result;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002590:	2320      	movs	r3, #32
 8002592:	e003      	b.n	800259c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	210f      	movs	r1, #15
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	401a      	ands	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	61fb      	str	r3, [r7, #28]
  return result;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	621a      	str	r2, [r3, #32]
}
 80025d8:	bf00      	nop
 80025da:	372c      	adds	r7, #44	; 0x2c
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_GPIO_SetAFPin_8_15>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b08b      	sub	sp, #44	; 0x2c
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	613b      	str	r3, [r7, #16]
  return result;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800260c:	2320      	movs	r3, #32
 800260e:	e003      	b.n	8002618 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	210f      	movs	r1, #15
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	401a      	ands	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	61fb      	str	r3, [r7, #28]
  return result;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002656:	bf00      	nop
 8002658:	372c      	adds	r7, #44	; 0x2c
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b088      	sub	sp, #32
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	60fb      	str	r3, [r7, #12]
  return result;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <LL_GPIO_Init+0x26>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e003      	b.n	8002690 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002692:	e048      	b.n	8002726 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03a      	beq.n	8002720 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d003      	beq.n	80026ba <LL_GPIO_Init+0x58>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d10e      	bne.n	80026d8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	461a      	mov	r2, r3
 80026c0:	69b9      	ldr	r1, [r7, #24]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fed7 	bl	8002476 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6819      	ldr	r1, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	461a      	mov	r2, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff feb7 	bl	8002446 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	461a      	mov	r2, r3
 80026de:	69b9      	ldr	r1, [r7, #24]
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff05 	bl	80024f0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d111      	bne.n	8002712 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2bff      	cmp	r3, #255	; 0xff
 80026f2:	d807      	bhi.n	8002704 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	461a      	mov	r2, r3
 80026fa:	69b9      	ldr	r1, [r7, #24]
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff34 	bl	800256a <LL_GPIO_SetAFPin_0_7>
 8002702:	e006      	b.n	8002712 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	461a      	mov	r2, r3
 800270a:	69b9      	ldr	r1, [r7, #24]
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff69 	bl	80025e4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	461a      	mov	r2, r3
 8002718:	69b9      	ldr	r1, [r7, #24]
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fe56 	bl	80023cc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1af      	bne.n	8002694 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <LL_RCC_HSI_IsReady>:
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <LL_RCC_HSI_IsReady+0x24>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	d101      	bne.n	8002756 <LL_RCC_HSI_IsReady+0x16>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <LL_RCC_HSI_IsReady+0x18>
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <LL_RCC_LSE_IsReady>:
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <LL_RCC_LSE_IsReady+0x24>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	d101      	bne.n	800277e <LL_RCC_LSE_IsReady+0x16>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <LL_RCC_LSE_IsReady+0x18>
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000

08002790 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b08      	cmp	r3, #8
 800279e:	d101      	bne.n	80027a4 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40021000 	.word	0x40021000

080027b4 <LL_RCC_MSI_GetRange>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <LL_RCC_MSI_GetRange+0x18>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000

080027d0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80027d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027da:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40021000 	.word	0x40021000

080027ec <LL_RCC_GetSysClkSource>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <LL_RCC_GetSysClkSource+0x18>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <LL_RCC_GetAHBPrescaler>:
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <LL_RCC_GetAHBPrescaler+0x18>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000

08002824 <LL_RCC_GetAPB1Prescaler>:
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <LL_RCC_GetAPB1Prescaler+0x18>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <LL_RCC_GetAPB2Prescaler>:
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000

0800285c <LL_RCC_GetUSARTClockSource>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <LL_RCC_GetUSARTClockSource+0x24>)
 8002866:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	401a      	ands	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	041b      	lsls	r3, r3, #16
 8002872:	4313      	orrs	r3, r2
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40021000 	.word	0x40021000

08002884 <LL_RCC_GetUARTClockSource>:
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <LL_RCC_GetUARTClockSource+0x24>)
 800288e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	4313      	orrs	r3, r2
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40021000 	.word	0x40021000

080028ac <LL_RCC_PLL_GetMainSource>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0303 	and.w	r3, r3, #3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000

080028c8 <LL_RCC_PLL_GetN>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <LL_RCC_PLL_GetN+0x18>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40021000 	.word	0x40021000

080028e4 <LL_RCC_PLL_GetR>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <LL_RCC_PLL_GetR+0x18>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000

08002900 <LL_RCC_PLL_GetDivider>:
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <LL_RCC_PLL_GetDivider+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000

0800291c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d137      	bne.n	800299e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ff94 	bl	800285c <LL_RCC_GetUSARTClockSource>
 8002934:	4603      	mov	r3, r0
 8002936:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800293a:	2b03      	cmp	r3, #3
 800293c:	f200 80b3 	bhi.w	8002aa6 <LL_RCC_GetUSARTClockFreq+0x18a>
 8002940:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	08002987 	.word	0x08002987
 800294c:	08002959 	.word	0x08002959
 8002950:	08002961 	.word	0x08002961
 8002954:	08002973 	.word	0x08002973
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002958:	f000 f956 	bl	8002c08 <RCC_GetSystemClockFreq>
 800295c:	60f8      	str	r0, [r7, #12]
        break;
 800295e:	e0b3      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002960:	f7ff feee 	bl	8002740 <LL_RCC_HSI_IsReady>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 809f 	beq.w	8002aaa <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800296e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002970:	e09b      	b.n	8002aaa <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002972:	f7ff fef9 	bl	8002768 <LL_RCC_LSE_IsReady>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8098 	beq.w	8002aae <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800297e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002982:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002984:	e093      	b.n	8002aae <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002986:	f000 f93f 	bl	8002c08 <RCC_GetSystemClockFreq>
 800298a:	4603      	mov	r3, r0
 800298c:	4618      	mov	r0, r3
 800298e:	f000 f9cb 	bl	8002d28 <RCC_GetHCLKClockFreq>
 8002992:	4603      	mov	r3, r0
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f9f1 	bl	8002d7c <RCC_GetPCLK2ClockFreq>
 800299a:	60f8      	str	r0, [r7, #12]
        break;
 800299c:	e094      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d146      	bne.n	8002a32 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff59 	bl	800285c <LL_RCC_GetUSARTClockSource>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	d87e      	bhi.n	8002ab2 <LL_RCC_GetUSARTClockFreq+0x196>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <LL_RCC_GetUSARTClockFreq+0xa0>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	08002a1b 	.word	0x08002a1b
 80029c0:	08002ab3 	.word	0x08002ab3
 80029c4:	08002ab3 	.word	0x08002ab3
 80029c8:	08002ab3 	.word	0x08002ab3
 80029cc:	080029f1 	.word	0x080029f1
 80029d0:	08002ab3 	.word	0x08002ab3
 80029d4:	08002ab3 	.word	0x08002ab3
 80029d8:	08002ab3 	.word	0x08002ab3
 80029dc:	080029f9 	.word	0x080029f9
 80029e0:	08002ab3 	.word	0x08002ab3
 80029e4:	08002ab3 	.word	0x08002ab3
 80029e8:	08002ab3 	.word	0x08002ab3
 80029ec:	08002a09 	.word	0x08002a09
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80029f0:	f000 f90a 	bl	8002c08 <RCC_GetSystemClockFreq>
 80029f4:	60f8      	str	r0, [r7, #12]
        break;
 80029f6:	e067      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80029f8:	f7ff fea2 	bl	8002740 <LL_RCC_HSI_IsReady>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d059      	beq.n	8002ab6 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8002a02:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002a04:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a06:	e056      	b.n	8002ab6 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002a08:	f7ff feae 	bl	8002768 <LL_RCC_LSE_IsReady>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d053      	beq.n	8002aba <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8002a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a16:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a18:	e04f      	b.n	8002aba <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002a1a:	f000 f8f5 	bl	8002c08 <RCC_GetSystemClockFreq>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f981 	bl	8002d28 <RCC_GetHCLKClockFreq>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f993 	bl	8002d54 <RCC_GetPCLK1ClockFreq>
 8002a2e:	60f8      	str	r0, [r7, #12]
        break;
 8002a30:	e04a      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b30      	cmp	r3, #48	; 0x30
 8002a36:	d147      	bne.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff0f 	bl	800285c <LL_RCC_GetUSARTClockSource>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002a44:	d01a      	beq.n	8002a7c <LL_RCC_GetUSARTClockFreq+0x160>
 8002a46:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002a4a:	d838      	bhi.n	8002abe <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00c      	beq.n	8002a6c <LL_RCC_GetUSARTClockFreq+0x150>
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d832      	bhi.n	8002abe <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002a58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a5c:	d017      	beq.n	8002a8e <LL_RCC_GetUSARTClockFreq+0x172>
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d12c      	bne.n	8002abe <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8002a64:	f000 f8d0 	bl	8002c08 <RCC_GetSystemClockFreq>
 8002a68:	60f8      	str	r0, [r7, #12]
          break;
 8002a6a:	e02d      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8002a6c:	f7ff fe68 	bl	8002740 <LL_RCC_HSI_IsReady>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d025      	beq.n	8002ac2 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8002a76:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002a78:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002a7a:	e022      	b.n	8002ac2 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8002a7c:	f7ff fe74 	bl	8002768 <LL_RCC_LSE_IsReady>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01f      	beq.n	8002ac6 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8002a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a8a:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002a8c:	e01b      	b.n	8002ac6 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002a8e:	f000 f8bb 	bl	8002c08 <RCC_GetSystemClockFreq>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f947 	bl	8002d28 <RCC_GetHCLKClockFreq>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f959 	bl	8002d54 <RCC_GetPCLK1ClockFreq>
 8002aa2:	60f8      	str	r0, [r7, #12]
          break;
 8002aa4:	e010      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002aa6:	bf00      	nop
 8002aa8:	e00e      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002aaa:	bf00      	nop
 8002aac:	e00c      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002aae:	bf00      	nop
 8002ab0:	e00a      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e008      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002ab6:	bf00      	nop
 8002ab8:	e006      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002aba:	bf00      	nop
 8002abc:	e004      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8002abe:	bf00      	nop
 8002ac0:	e002      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8002ac6:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	00f42400 	.word	0x00f42400
 8002ad8:	00300020 	.word	0x00300020
 8002adc:	00300010 	.word	0x00300010

08002ae0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2bc0      	cmp	r3, #192	; 0xc0
 8002af0:	d13b      	bne.n	8002b6a <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fec6 	bl	8002884 <LL_RCC_GetUARTClockSource>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8002afe:	d01a      	beq.n	8002b36 <LL_RCC_GetUARTClockFreq+0x56>
 8002b00:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8002b04:	d82c      	bhi.n	8002b60 <LL_RCC_GetUARTClockFreq+0x80>
 8002b06:	4a3b      	ldr	r2, [pc, #236]	; (8002bf4 <LL_RCC_GetUARTClockFreq+0x114>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00c      	beq.n	8002b26 <LL_RCC_GetUARTClockFreq+0x46>
 8002b0c:	4a39      	ldr	r2, [pc, #228]	; (8002bf4 <LL_RCC_GetUARTClockFreq+0x114>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d826      	bhi.n	8002b60 <LL_RCC_GetUARTClockFreq+0x80>
 8002b12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b16:	d017      	beq.n	8002b48 <LL_RCC_GetUARTClockFreq+0x68>
 8002b18:	4a37      	ldr	r2, [pc, #220]	; (8002bf8 <LL_RCC_GetUARTClockFreq+0x118>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d120      	bne.n	8002b60 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002b1e:	f000 f873 	bl	8002c08 <RCC_GetSystemClockFreq>
 8002b22:	60f8      	str	r0, [r7, #12]
        break;
 8002b24:	e021      	b.n	8002b6a <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002b26:	f7ff fe0b 	bl	8002740 <LL_RCC_HSI_IsReady>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d019      	beq.n	8002b64 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <LL_RCC_GetUARTClockFreq+0x11c>)
 8002b32:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002b34:	e016      	b.n	8002b64 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002b36:	f7ff fe17 	bl	8002768 <LL_RCC_LSE_IsReady>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 8002b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b44:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002b46:	e00f      	b.n	8002b68 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002b48:	f000 f85e 	bl	8002c08 <RCC_GetSystemClockFreq>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f8ea 	bl	8002d28 <RCC_GetHCLKClockFreq>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f8fc 	bl	8002d54 <RCC_GetPCLK1ClockFreq>
 8002b5c:	60f8      	str	r0, [r7, #12]
        break;
 8002b5e:	e004      	b.n	8002b6a <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 8002b60:	bf00      	nop
 8002b62:	e002      	b.n	8002b6a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8002b68:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b70:	d13b      	bne.n	8002bea <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fe86 	bl	8002884 <LL_RCC_GetUARTClockSource>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002b7e:	d01a      	beq.n	8002bb6 <LL_RCC_GetUARTClockFreq+0xd6>
 8002b80:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002b84:	d82c      	bhi.n	8002be0 <LL_RCC_GetUARTClockFreq+0x100>
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <LL_RCC_GetUARTClockFreq+0x120>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00c      	beq.n	8002ba6 <LL_RCC_GetUARTClockFreq+0xc6>
 8002b8c:	4a1c      	ldr	r2, [pc, #112]	; (8002c00 <LL_RCC_GetUARTClockFreq+0x120>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d826      	bhi.n	8002be0 <LL_RCC_GetUARTClockFreq+0x100>
 8002b92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b96:	d017      	beq.n	8002bc8 <LL_RCC_GetUARTClockFreq+0xe8>
 8002b98:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <LL_RCC_GetUARTClockFreq+0x124>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d120      	bne.n	8002be0 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002b9e:	f000 f833 	bl	8002c08 <RCC_GetSystemClockFreq>
 8002ba2:	60f8      	str	r0, [r7, #12]
        break;
 8002ba4:	e021      	b.n	8002bea <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002ba6:	f7ff fdcb 	bl	8002740 <LL_RCC_HSI_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d019      	beq.n	8002be4 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <LL_RCC_GetUARTClockFreq+0x11c>)
 8002bb2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002bb4:	e016      	b.n	8002be4 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002bb6:	f7ff fdd7 	bl	8002768 <LL_RCC_LSE_IsReady>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8002bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002bc6:	e00f      	b.n	8002be8 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002bc8:	f000 f81e 	bl	8002c08 <RCC_GetSystemClockFreq>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f8aa 	bl	8002d28 <RCC_GetHCLKClockFreq>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f8bc 	bl	8002d54 <RCC_GetPCLK1ClockFreq>
 8002bdc:	60f8      	str	r0, [r7, #12]
        break;
 8002bde:	e004      	b.n	8002bea <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8002be0:	bf00      	nop
 8002be2:	e002      	b.n	8002bea <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8002be8:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	00c00080 	.word	0x00c00080
 8002bf8:	00c00040 	.word	0x00c00040
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	03000200 	.word	0x03000200
 8002c04:	03000100 	.word	0x03000100

08002c08 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002c0e:	f7ff fded 	bl	80027ec <LL_RCC_GetSysClkSource>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d851      	bhi.n	8002cbc <RCC_GetSystemClockFreq+0xb4>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <RCC_GetSystemClockFreq+0x18>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c55 	.word	0x08002c55
 8002c24:	08002cbd 	.word	0x08002cbd
 8002c28:	08002cbd 	.word	0x08002cbd
 8002c2c:	08002cbd 	.word	0x08002cbd
 8002c30:	08002ca9 	.word	0x08002ca9
 8002c34:	08002cbd 	.word	0x08002cbd
 8002c38:	08002cbd 	.word	0x08002cbd
 8002c3c:	08002cbd 	.word	0x08002cbd
 8002c40:	08002caf 	.word	0x08002caf
 8002c44:	08002cbd 	.word	0x08002cbd
 8002c48:	08002cbd 	.word	0x08002cbd
 8002c4c:	08002cbd 	.word	0x08002cbd
 8002c50:	08002cb5 	.word	0x08002cb5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002c54:	f7ff fd9c 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d111      	bne.n	8002c82 <RCC_GetSystemClockFreq+0x7a>
 8002c5e:	f7ff fd97 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <RCC_GetSystemClockFreq+0x6a>
 8002c68:	f7ff fda4 	bl	80027b4 <LL_RCC_MSI_GetRange>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	e003      	b.n	8002c7a <RCC_GetSystemClockFreq+0x72>
 8002c72:	f7ff fdad 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002c76:	4603      	mov	r3, r0
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	4a28      	ldr	r2, [pc, #160]	; (8002d1c <RCC_GetSystemClockFreq+0x114>)
 8002c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c80:	e010      	b.n	8002ca4 <RCC_GetSystemClockFreq+0x9c>
 8002c82:	f7ff fd85 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <RCC_GetSystemClockFreq+0x8e>
 8002c8c:	f7ff fd92 	bl	80027b4 <LL_RCC_MSI_GetRange>
 8002c90:	4603      	mov	r3, r0
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	e003      	b.n	8002c9e <RCC_GetSystemClockFreq+0x96>
 8002c96:	f7ff fd9b 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <RCC_GetSystemClockFreq+0x114>)
 8002ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002ca6:	e033      	b.n	8002d10 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <RCC_GetSystemClockFreq+0x118>)
 8002caa:	607b      	str	r3, [r7, #4]
      break;
 8002cac:	e030      	b.n	8002d10 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <RCC_GetSystemClockFreq+0x11c>)
 8002cb0:	607b      	str	r3, [r7, #4]
      break;
 8002cb2:	e02d      	b.n	8002d10 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002cb4:	f000 f876 	bl	8002da4 <RCC_PLL_GetFreqDomain_SYS>
 8002cb8:	6078      	str	r0, [r7, #4]
      break;
 8002cba:	e029      	b.n	8002d10 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002cbc:	f7ff fd68 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d111      	bne.n	8002cea <RCC_GetSystemClockFreq+0xe2>
 8002cc6:	f7ff fd63 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <RCC_GetSystemClockFreq+0xd2>
 8002cd0:	f7ff fd70 	bl	80027b4 <LL_RCC_MSI_GetRange>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	e003      	b.n	8002ce2 <RCC_GetSystemClockFreq+0xda>
 8002cda:	f7ff fd79 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <RCC_GetSystemClockFreq+0x114>)
 8002ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce8:	e010      	b.n	8002d0c <RCC_GetSystemClockFreq+0x104>
 8002cea:	f7ff fd51 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <RCC_GetSystemClockFreq+0xf6>
 8002cf4:	f7ff fd5e 	bl	80027b4 <LL_RCC_MSI_GetRange>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	e003      	b.n	8002d06 <RCC_GetSystemClockFreq+0xfe>
 8002cfe:	f7ff fd67 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002d02:	4603      	mov	r3, r0
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <RCC_GetSystemClockFreq+0x114>)
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002d0e:	bf00      	nop
  }

  return frequency;
 8002d10:	687b      	ldr	r3, [r7, #4]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	0800409c 	.word	0x0800409c
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200

08002d28 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002d30:	f7ff fd6a 	bl	8002808 <LL_RCC_GetAHBPrescaler>
 8002d34:	4603      	mov	r3, r0
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <RCC_GetHCLKClockFreq+0x28>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	461a      	mov	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	40d3      	lsrs	r3, r2
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	08004084 	.word	0x08004084

08002d54 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002d5c:	f7ff fd62 	bl	8002824 <LL_RCC_GetAPB1Prescaler>
 8002d60:	4603      	mov	r3, r0
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <RCC_GetPCLK1ClockFreq+0x24>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	40d3      	lsrs	r3, r2
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	08004094 	.word	0x08004094

08002d7c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002d84:	f7ff fd5c 	bl	8002840 <LL_RCC_GetAPB2Prescaler>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	0adb      	lsrs	r3, r3, #11
 8002d8c:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <RCC_GetPCLK2ClockFreq+0x24>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	40d3      	lsrs	r3, r2
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	08004094 	.word	0x08004094

08002da4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002daa:	f7ff fd7f 	bl	80028ac <LL_RCC_PLL_GetMainSource>
 8002dae:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d036      	beq.n	8002e24 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d836      	bhi.n	8002e2a <RCC_PLL_GetFreqDomain_SYS+0x86>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d003      	beq.n	8002dca <RCC_PLL_GetFreqDomain_SYS+0x26>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d02a      	beq.n	8002e1e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8002dc8:	e02f      	b.n	8002e2a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002dca:	f7ff fce1 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d111      	bne.n	8002df8 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8002dd4:	f7ff fcdc 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8002dde:	f7ff fce9 	bl	80027b4 <LL_RCC_MSI_GetRange>
 8002de2:	4603      	mov	r3, r0
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	e003      	b.n	8002df0 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8002de8:	f7ff fcf2 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002dec:	4603      	mov	r3, r0
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	4a2f      	ldr	r2, [pc, #188]	; (8002eb0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	e010      	b.n	8002e1a <RCC_PLL_GetFreqDomain_SYS+0x76>
 8002df8:	f7ff fcca 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8002e02:	f7ff fcd7 	bl	80027b4 <LL_RCC_MSI_GetRange>
 8002e06:	4603      	mov	r3, r0
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	e003      	b.n	8002e14 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8002e0c:	f7ff fce0 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002e10:	4603      	mov	r3, r0
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002e1c:	e02f      	b.n	8002e7e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002e1e:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002e20:	607b      	str	r3, [r7, #4]
      break;
 8002e22:	e02c      	b.n	8002e7e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8002e26:	607b      	str	r3, [r7, #4]
      break;
 8002e28:	e029      	b.n	8002e7e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002e2a:	f7ff fcb1 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8002e34:	f7ff fcac 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8002e3e:	f7ff fcb9 	bl	80027b4 <LL_RCC_MSI_GetRange>
 8002e42:	4603      	mov	r3, r0
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	e003      	b.n	8002e50 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8002e48:	f7ff fcc2 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	e010      	b.n	8002e7a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8002e58:	f7ff fc9a 	bl	8002790 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8002e62:	f7ff fca7 	bl	80027b4 <LL_RCC_MSI_GetRange>
 8002e66:	4603      	mov	r3, r0
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	e003      	b.n	8002e74 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8002e6c:	f7ff fcb0 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002e70:	4603      	mov	r3, r0
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002e7c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002e7e:	f7ff fd3f 	bl	8002900 <LL_RCC_PLL_GetDivider>
 8002e82:	4603      	mov	r3, r0
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	3301      	adds	r3, #1
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	fbb2 f4f3 	udiv	r4, r2, r3
 8002e8e:	f7ff fd1b 	bl	80028c8 <LL_RCC_PLL_GetN>
 8002e92:	4603      	mov	r3, r0
 8002e94:	fb03 f404 	mul.w	r4, r3, r4
 8002e98:	f7ff fd24 	bl	80028e4 <LL_RCC_PLL_GetR>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	0e5b      	lsrs	r3, r3, #25
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	0800409c 	.word	0x0800409c
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	007a1200 	.word	0x007a1200

08002ebc <LL_USART_IsEnabled>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <LL_USART_IsEnabled+0x18>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <LL_USART_IsEnabled+0x1a>
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_USART_SetStopBitsLength>:
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	605a      	str	r2, [r3, #4]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_USART_SetHWFlowCtrl>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	609a      	str	r2, [r3, #8]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_USART_SetBaudRate>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b087      	sub	sp, #28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f42:	d11a      	bne.n	8002f7a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	005a      	lsls	r2, r3, #1
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	441a      	add	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	60da      	str	r2, [r3, #12]
}
 8002f78:	e00a      	b.n	8002f90 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	085a      	lsrs	r2, r3, #1
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	441a      	add	r2, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	60da      	str	r2, [r3, #12]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ff84 	bl	8002ebc <LL_USART_IsEnabled>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d15b      	bne.n	8003072 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	; (800307c <LL_USART_Init+0xe0>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	6851      	ldr	r1, [r2, #4]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	6912      	ldr	r2, [r2, #16]
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	6992      	ldr	r2, [r2, #24]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ff7c 	bl	8002ee2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff89 	bl	8002f08 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a21      	ldr	r2, [pc, #132]	; (8003080 <LL_USART_Init+0xe4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d104      	bne.n	8003008 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002ffe:	2003      	movs	r0, #3
 8003000:	f7ff fc8c 	bl	800291c <LL_RCC_GetUSARTClockFreq>
 8003004:	60b8      	str	r0, [r7, #8]
 8003006:	e023      	b.n	8003050 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <LL_USART_Init+0xe8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d104      	bne.n	800301a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003010:	200c      	movs	r0, #12
 8003012:	f7ff fc83 	bl	800291c <LL_RCC_GetUSARTClockFreq>
 8003016:	60b8      	str	r0, [r7, #8]
 8003018:	e01a      	b.n	8003050 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <LL_USART_Init+0xec>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d104      	bne.n	800302c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003022:	2030      	movs	r0, #48	; 0x30
 8003024:	f7ff fc7a 	bl	800291c <LL_RCC_GetUSARTClockFreq>
 8003028:	60b8      	str	r0, [r7, #8]
 800302a:	e011      	b.n	8003050 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a17      	ldr	r2, [pc, #92]	; (800308c <LL_USART_Init+0xf0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d104      	bne.n	800303e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003034:	20c0      	movs	r0, #192	; 0xc0
 8003036:	f7ff fd53 	bl	8002ae0 <LL_RCC_GetUARTClockFreq>
 800303a:	60b8      	str	r0, [r7, #8]
 800303c:	e008      	b.n	8003050 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a13      	ldr	r2, [pc, #76]	; (8003090 <LL_USART_Init+0xf4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d104      	bne.n	8003050 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003046:	f44f 7040 	mov.w	r0, #768	; 0x300
 800304a:	f7ff fd49 	bl	8002ae0 <LL_RCC_GetUARTClockFreq>
 800304e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00d      	beq.n	8003072 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff5e 	bl	8002f2e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	efff69f3 	.word	0xefff69f3
 8003080:	40013800 	.word	0x40013800
 8003084:	40004400 	.word	0x40004400
 8003088:	40004800 	.word	0x40004800
 800308c:	40004c00 	.word	0x40004c00
 8003090:	40005000 	.word	0x40005000

08003094 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <LL_SetSystemCoreClock+0x1c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000

080030b4 <std>:
 80030b4:	2300      	movs	r3, #0
 80030b6:	b510      	push	{r4, lr}
 80030b8:	4604      	mov	r4, r0
 80030ba:	e9c0 3300 	strd	r3, r3, [r0]
 80030be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030c2:	6083      	str	r3, [r0, #8]
 80030c4:	8181      	strh	r1, [r0, #12]
 80030c6:	6643      	str	r3, [r0, #100]	; 0x64
 80030c8:	81c2      	strh	r2, [r0, #14]
 80030ca:	6183      	str	r3, [r0, #24]
 80030cc:	4619      	mov	r1, r3
 80030ce:	2208      	movs	r2, #8
 80030d0:	305c      	adds	r0, #92	; 0x5c
 80030d2:	f000 f9f7 	bl	80034c4 <memset>
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <std+0x58>)
 80030d8:	6263      	str	r3, [r4, #36]	; 0x24
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <std+0x5c>)
 80030dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <std+0x60>)
 80030e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <std+0x64>)
 80030e4:	6323      	str	r3, [r4, #48]	; 0x30
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <std+0x68>)
 80030e8:	6224      	str	r4, [r4, #32]
 80030ea:	429c      	cmp	r4, r3
 80030ec:	d006      	beq.n	80030fc <std+0x48>
 80030ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80030f2:	4294      	cmp	r4, r2
 80030f4:	d002      	beq.n	80030fc <std+0x48>
 80030f6:	33d0      	adds	r3, #208	; 0xd0
 80030f8:	429c      	cmp	r4, r3
 80030fa:	d105      	bne.n	8003108 <std+0x54>
 80030fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003104:	f000 ba68 	b.w	80035d8 <__retarget_lock_init_recursive>
 8003108:	bd10      	pop	{r4, pc}
 800310a:	bf00      	nop
 800310c:	08003315 	.word	0x08003315
 8003110:	08003337 	.word	0x08003337
 8003114:	0800336f 	.word	0x0800336f
 8003118:	08003393 	.word	0x08003393
 800311c:	20000168 	.word	0x20000168

08003120 <stdio_exit_handler>:
 8003120:	4a02      	ldr	r2, [pc, #8]	; (800312c <stdio_exit_handler+0xc>)
 8003122:	4903      	ldr	r1, [pc, #12]	; (8003130 <stdio_exit_handler+0x10>)
 8003124:	4803      	ldr	r0, [pc, #12]	; (8003134 <stdio_exit_handler+0x14>)
 8003126:	f000 b869 	b.w	80031fc <_fwalk_sglue>
 800312a:	bf00      	nop
 800312c:	2000000c 	.word	0x2000000c
 8003130:	08003e95 	.word	0x08003e95
 8003134:	20000018 	.word	0x20000018

08003138 <cleanup_stdio>:
 8003138:	6841      	ldr	r1, [r0, #4]
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <cleanup_stdio+0x34>)
 800313c:	4299      	cmp	r1, r3
 800313e:	b510      	push	{r4, lr}
 8003140:	4604      	mov	r4, r0
 8003142:	d001      	beq.n	8003148 <cleanup_stdio+0x10>
 8003144:	f000 fea6 	bl	8003e94 <_fflush_r>
 8003148:	68a1      	ldr	r1, [r4, #8]
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <cleanup_stdio+0x38>)
 800314c:	4299      	cmp	r1, r3
 800314e:	d002      	beq.n	8003156 <cleanup_stdio+0x1e>
 8003150:	4620      	mov	r0, r4
 8003152:	f000 fe9f 	bl	8003e94 <_fflush_r>
 8003156:	68e1      	ldr	r1, [r4, #12]
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <cleanup_stdio+0x3c>)
 800315a:	4299      	cmp	r1, r3
 800315c:	d004      	beq.n	8003168 <cleanup_stdio+0x30>
 800315e:	4620      	mov	r0, r4
 8003160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003164:	f000 be96 	b.w	8003e94 <_fflush_r>
 8003168:	bd10      	pop	{r4, pc}
 800316a:	bf00      	nop
 800316c:	20000168 	.word	0x20000168
 8003170:	200001d0 	.word	0x200001d0
 8003174:	20000238 	.word	0x20000238

08003178 <global_stdio_init.part.0>:
 8003178:	b510      	push	{r4, lr}
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <global_stdio_init.part.0+0x30>)
 800317c:	4c0b      	ldr	r4, [pc, #44]	; (80031ac <global_stdio_init.part.0+0x34>)
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <global_stdio_init.part.0+0x38>)
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	4620      	mov	r0, r4
 8003184:	2200      	movs	r2, #0
 8003186:	2104      	movs	r1, #4
 8003188:	f7ff ff94 	bl	80030b4 <std>
 800318c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003190:	2201      	movs	r2, #1
 8003192:	2109      	movs	r1, #9
 8003194:	f7ff ff8e 	bl	80030b4 <std>
 8003198:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800319c:	2202      	movs	r2, #2
 800319e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a2:	2112      	movs	r1, #18
 80031a4:	f7ff bf86 	b.w	80030b4 <std>
 80031a8:	200002a0 	.word	0x200002a0
 80031ac:	20000168 	.word	0x20000168
 80031b0:	08003121 	.word	0x08003121

080031b4 <__sfp_lock_acquire>:
 80031b4:	4801      	ldr	r0, [pc, #4]	; (80031bc <__sfp_lock_acquire+0x8>)
 80031b6:	f000 ba10 	b.w	80035da <__retarget_lock_acquire_recursive>
 80031ba:	bf00      	nop
 80031bc:	200002a9 	.word	0x200002a9

080031c0 <__sfp_lock_release>:
 80031c0:	4801      	ldr	r0, [pc, #4]	; (80031c8 <__sfp_lock_release+0x8>)
 80031c2:	f000 ba0b 	b.w	80035dc <__retarget_lock_release_recursive>
 80031c6:	bf00      	nop
 80031c8:	200002a9 	.word	0x200002a9

080031cc <__sinit>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	4604      	mov	r4, r0
 80031d0:	f7ff fff0 	bl	80031b4 <__sfp_lock_acquire>
 80031d4:	6a23      	ldr	r3, [r4, #32]
 80031d6:	b11b      	cbz	r3, 80031e0 <__sinit+0x14>
 80031d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031dc:	f7ff bff0 	b.w	80031c0 <__sfp_lock_release>
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <__sinit+0x28>)
 80031e2:	6223      	str	r3, [r4, #32]
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <__sinit+0x2c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f5      	bne.n	80031d8 <__sinit+0xc>
 80031ec:	f7ff ffc4 	bl	8003178 <global_stdio_init.part.0>
 80031f0:	e7f2      	b.n	80031d8 <__sinit+0xc>
 80031f2:	bf00      	nop
 80031f4:	08003139 	.word	0x08003139
 80031f8:	200002a0 	.word	0x200002a0

080031fc <_fwalk_sglue>:
 80031fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003200:	4607      	mov	r7, r0
 8003202:	4688      	mov	r8, r1
 8003204:	4614      	mov	r4, r2
 8003206:	2600      	movs	r6, #0
 8003208:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800320c:	f1b9 0901 	subs.w	r9, r9, #1
 8003210:	d505      	bpl.n	800321e <_fwalk_sglue+0x22>
 8003212:	6824      	ldr	r4, [r4, #0]
 8003214:	2c00      	cmp	r4, #0
 8003216:	d1f7      	bne.n	8003208 <_fwalk_sglue+0xc>
 8003218:	4630      	mov	r0, r6
 800321a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800321e:	89ab      	ldrh	r3, [r5, #12]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d907      	bls.n	8003234 <_fwalk_sglue+0x38>
 8003224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003228:	3301      	adds	r3, #1
 800322a:	d003      	beq.n	8003234 <_fwalk_sglue+0x38>
 800322c:	4629      	mov	r1, r5
 800322e:	4638      	mov	r0, r7
 8003230:	47c0      	blx	r8
 8003232:	4306      	orrs	r6, r0
 8003234:	3568      	adds	r5, #104	; 0x68
 8003236:	e7e9      	b.n	800320c <_fwalk_sglue+0x10>

08003238 <iprintf>:
 8003238:	b40f      	push	{r0, r1, r2, r3}
 800323a:	b507      	push	{r0, r1, r2, lr}
 800323c:	4906      	ldr	r1, [pc, #24]	; (8003258 <iprintf+0x20>)
 800323e:	ab04      	add	r3, sp, #16
 8003240:	6808      	ldr	r0, [r1, #0]
 8003242:	f853 2b04 	ldr.w	r2, [r3], #4
 8003246:	6881      	ldr	r1, [r0, #8]
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	f000 faf3 	bl	8003834 <_vfiprintf_r>
 800324e:	b003      	add	sp, #12
 8003250:	f85d eb04 	ldr.w	lr, [sp], #4
 8003254:	b004      	add	sp, #16
 8003256:	4770      	bx	lr
 8003258:	20000064 	.word	0x20000064

0800325c <_puts_r>:
 800325c:	6a03      	ldr	r3, [r0, #32]
 800325e:	b570      	push	{r4, r5, r6, lr}
 8003260:	6884      	ldr	r4, [r0, #8]
 8003262:	4605      	mov	r5, r0
 8003264:	460e      	mov	r6, r1
 8003266:	b90b      	cbnz	r3, 800326c <_puts_r+0x10>
 8003268:	f7ff ffb0 	bl	80031cc <__sinit>
 800326c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800326e:	07db      	lsls	r3, r3, #31
 8003270:	d405      	bmi.n	800327e <_puts_r+0x22>
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	0598      	lsls	r0, r3, #22
 8003276:	d402      	bmi.n	800327e <_puts_r+0x22>
 8003278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800327a:	f000 f9ae 	bl	80035da <__retarget_lock_acquire_recursive>
 800327e:	89a3      	ldrh	r3, [r4, #12]
 8003280:	0719      	lsls	r1, r3, #28
 8003282:	d513      	bpl.n	80032ac <_puts_r+0x50>
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	b18b      	cbz	r3, 80032ac <_puts_r+0x50>
 8003288:	3e01      	subs	r6, #1
 800328a:	68a3      	ldr	r3, [r4, #8]
 800328c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003290:	3b01      	subs	r3, #1
 8003292:	60a3      	str	r3, [r4, #8]
 8003294:	b9e9      	cbnz	r1, 80032d2 <_puts_r+0x76>
 8003296:	2b00      	cmp	r3, #0
 8003298:	da2e      	bge.n	80032f8 <_puts_r+0x9c>
 800329a:	4622      	mov	r2, r4
 800329c:	210a      	movs	r1, #10
 800329e:	4628      	mov	r0, r5
 80032a0:	f000 f87b 	bl	800339a <__swbuf_r>
 80032a4:	3001      	adds	r0, #1
 80032a6:	d007      	beq.n	80032b8 <_puts_r+0x5c>
 80032a8:	250a      	movs	r5, #10
 80032aa:	e007      	b.n	80032bc <_puts_r+0x60>
 80032ac:	4621      	mov	r1, r4
 80032ae:	4628      	mov	r0, r5
 80032b0:	f000 f8b0 	bl	8003414 <__swsetup_r>
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d0e7      	beq.n	8003288 <_puts_r+0x2c>
 80032b8:	f04f 35ff 	mov.w	r5, #4294967295
 80032bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032be:	07da      	lsls	r2, r3, #31
 80032c0:	d405      	bmi.n	80032ce <_puts_r+0x72>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	059b      	lsls	r3, r3, #22
 80032c6:	d402      	bmi.n	80032ce <_puts_r+0x72>
 80032c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ca:	f000 f987 	bl	80035dc <__retarget_lock_release_recursive>
 80032ce:	4628      	mov	r0, r5
 80032d0:	bd70      	pop	{r4, r5, r6, pc}
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da04      	bge.n	80032e0 <_puts_r+0x84>
 80032d6:	69a2      	ldr	r2, [r4, #24]
 80032d8:	429a      	cmp	r2, r3
 80032da:	dc06      	bgt.n	80032ea <_puts_r+0x8e>
 80032dc:	290a      	cmp	r1, #10
 80032de:	d004      	beq.n	80032ea <_puts_r+0x8e>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	6022      	str	r2, [r4, #0]
 80032e6:	7019      	strb	r1, [r3, #0]
 80032e8:	e7cf      	b.n	800328a <_puts_r+0x2e>
 80032ea:	4622      	mov	r2, r4
 80032ec:	4628      	mov	r0, r5
 80032ee:	f000 f854 	bl	800339a <__swbuf_r>
 80032f2:	3001      	adds	r0, #1
 80032f4:	d1c9      	bne.n	800328a <_puts_r+0x2e>
 80032f6:	e7df      	b.n	80032b8 <_puts_r+0x5c>
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	250a      	movs	r5, #10
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	6022      	str	r2, [r4, #0]
 8003300:	701d      	strb	r5, [r3, #0]
 8003302:	e7db      	b.n	80032bc <_puts_r+0x60>

08003304 <puts>:
 8003304:	4b02      	ldr	r3, [pc, #8]	; (8003310 <puts+0xc>)
 8003306:	4601      	mov	r1, r0
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f7ff bfa7 	b.w	800325c <_puts_r>
 800330e:	bf00      	nop
 8003310:	20000064 	.word	0x20000064

08003314 <__sread>:
 8003314:	b510      	push	{r4, lr}
 8003316:	460c      	mov	r4, r1
 8003318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800331c:	f000 f90e 	bl	800353c <_read_r>
 8003320:	2800      	cmp	r0, #0
 8003322:	bfab      	itete	ge
 8003324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003326:	89a3      	ldrhlt	r3, [r4, #12]
 8003328:	181b      	addge	r3, r3, r0
 800332a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800332e:	bfac      	ite	ge
 8003330:	6563      	strge	r3, [r4, #84]	; 0x54
 8003332:	81a3      	strhlt	r3, [r4, #12]
 8003334:	bd10      	pop	{r4, pc}

08003336 <__swrite>:
 8003336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800333a:	461f      	mov	r7, r3
 800333c:	898b      	ldrh	r3, [r1, #12]
 800333e:	05db      	lsls	r3, r3, #23
 8003340:	4605      	mov	r5, r0
 8003342:	460c      	mov	r4, r1
 8003344:	4616      	mov	r6, r2
 8003346:	d505      	bpl.n	8003354 <__swrite+0x1e>
 8003348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800334c:	2302      	movs	r3, #2
 800334e:	2200      	movs	r2, #0
 8003350:	f000 f8e2 	bl	8003518 <_lseek_r>
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800335a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800335e:	81a3      	strh	r3, [r4, #12]
 8003360:	4632      	mov	r2, r6
 8003362:	463b      	mov	r3, r7
 8003364:	4628      	mov	r0, r5
 8003366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800336a:	f000 b8f9 	b.w	8003560 <_write_r>

0800336e <__sseek>:
 800336e:	b510      	push	{r4, lr}
 8003370:	460c      	mov	r4, r1
 8003372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003376:	f000 f8cf 	bl	8003518 <_lseek_r>
 800337a:	1c43      	adds	r3, r0, #1
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	bf15      	itete	ne
 8003380:	6560      	strne	r0, [r4, #84]	; 0x54
 8003382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800338a:	81a3      	strheq	r3, [r4, #12]
 800338c:	bf18      	it	ne
 800338e:	81a3      	strhne	r3, [r4, #12]
 8003390:	bd10      	pop	{r4, pc}

08003392 <__sclose>:
 8003392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003396:	f000 b8af 	b.w	80034f8 <_close_r>

0800339a <__swbuf_r>:
 800339a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339c:	460e      	mov	r6, r1
 800339e:	4614      	mov	r4, r2
 80033a0:	4605      	mov	r5, r0
 80033a2:	b118      	cbz	r0, 80033ac <__swbuf_r+0x12>
 80033a4:	6a03      	ldr	r3, [r0, #32]
 80033a6:	b90b      	cbnz	r3, 80033ac <__swbuf_r+0x12>
 80033a8:	f7ff ff10 	bl	80031cc <__sinit>
 80033ac:	69a3      	ldr	r3, [r4, #24]
 80033ae:	60a3      	str	r3, [r4, #8]
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	071a      	lsls	r2, r3, #28
 80033b4:	d525      	bpl.n	8003402 <__swbuf_r+0x68>
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	b31b      	cbz	r3, 8003402 <__swbuf_r+0x68>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	6922      	ldr	r2, [r4, #16]
 80033be:	1a98      	subs	r0, r3, r2
 80033c0:	6963      	ldr	r3, [r4, #20]
 80033c2:	b2f6      	uxtb	r6, r6
 80033c4:	4283      	cmp	r3, r0
 80033c6:	4637      	mov	r7, r6
 80033c8:	dc04      	bgt.n	80033d4 <__swbuf_r+0x3a>
 80033ca:	4621      	mov	r1, r4
 80033cc:	4628      	mov	r0, r5
 80033ce:	f000 fd61 	bl	8003e94 <_fflush_r>
 80033d2:	b9e0      	cbnz	r0, 800340e <__swbuf_r+0x74>
 80033d4:	68a3      	ldr	r3, [r4, #8]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60a3      	str	r3, [r4, #8]
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	6022      	str	r2, [r4, #0]
 80033e0:	701e      	strb	r6, [r3, #0]
 80033e2:	6962      	ldr	r2, [r4, #20]
 80033e4:	1c43      	adds	r3, r0, #1
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d004      	beq.n	80033f4 <__swbuf_r+0x5a>
 80033ea:	89a3      	ldrh	r3, [r4, #12]
 80033ec:	07db      	lsls	r3, r3, #31
 80033ee:	d506      	bpl.n	80033fe <__swbuf_r+0x64>
 80033f0:	2e0a      	cmp	r6, #10
 80033f2:	d104      	bne.n	80033fe <__swbuf_r+0x64>
 80033f4:	4621      	mov	r1, r4
 80033f6:	4628      	mov	r0, r5
 80033f8:	f000 fd4c 	bl	8003e94 <_fflush_r>
 80033fc:	b938      	cbnz	r0, 800340e <__swbuf_r+0x74>
 80033fe:	4638      	mov	r0, r7
 8003400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003402:	4621      	mov	r1, r4
 8003404:	4628      	mov	r0, r5
 8003406:	f000 f805 	bl	8003414 <__swsetup_r>
 800340a:	2800      	cmp	r0, #0
 800340c:	d0d5      	beq.n	80033ba <__swbuf_r+0x20>
 800340e:	f04f 37ff 	mov.w	r7, #4294967295
 8003412:	e7f4      	b.n	80033fe <__swbuf_r+0x64>

08003414 <__swsetup_r>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <__swsetup_r+0xac>)
 8003418:	4605      	mov	r5, r0
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	460c      	mov	r4, r1
 800341e:	b118      	cbz	r0, 8003428 <__swsetup_r+0x14>
 8003420:	6a03      	ldr	r3, [r0, #32]
 8003422:	b90b      	cbnz	r3, 8003428 <__swsetup_r+0x14>
 8003424:	f7ff fed2 	bl	80031cc <__sinit>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800342e:	0718      	lsls	r0, r3, #28
 8003430:	d422      	bmi.n	8003478 <__swsetup_r+0x64>
 8003432:	06d9      	lsls	r1, r3, #27
 8003434:	d407      	bmi.n	8003446 <__swsetup_r+0x32>
 8003436:	2309      	movs	r3, #9
 8003438:	602b      	str	r3, [r5, #0]
 800343a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800343e:	81a3      	strh	r3, [r4, #12]
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	e034      	b.n	80034b0 <__swsetup_r+0x9c>
 8003446:	0758      	lsls	r0, r3, #29
 8003448:	d512      	bpl.n	8003470 <__swsetup_r+0x5c>
 800344a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800344c:	b141      	cbz	r1, 8003460 <__swsetup_r+0x4c>
 800344e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003452:	4299      	cmp	r1, r3
 8003454:	d002      	beq.n	800345c <__swsetup_r+0x48>
 8003456:	4628      	mov	r0, r5
 8003458:	f000 f8ca 	bl	80035f0 <_free_r>
 800345c:	2300      	movs	r3, #0
 800345e:	6363      	str	r3, [r4, #52]	; 0x34
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003466:	81a3      	strh	r3, [r4, #12]
 8003468:	2300      	movs	r3, #0
 800346a:	6063      	str	r3, [r4, #4]
 800346c:	6923      	ldr	r3, [r4, #16]
 800346e:	6023      	str	r3, [r4, #0]
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	f043 0308 	orr.w	r3, r3, #8
 8003476:	81a3      	strh	r3, [r4, #12]
 8003478:	6923      	ldr	r3, [r4, #16]
 800347a:	b94b      	cbnz	r3, 8003490 <__swsetup_r+0x7c>
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003486:	d003      	beq.n	8003490 <__swsetup_r+0x7c>
 8003488:	4621      	mov	r1, r4
 800348a:	4628      	mov	r0, r5
 800348c:	f000 fd50 	bl	8003f30 <__smakebuf_r>
 8003490:	89a0      	ldrh	r0, [r4, #12]
 8003492:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003496:	f010 0301 	ands.w	r3, r0, #1
 800349a:	d00a      	beq.n	80034b2 <__swsetup_r+0x9e>
 800349c:	2300      	movs	r3, #0
 800349e:	60a3      	str	r3, [r4, #8]
 80034a0:	6963      	ldr	r3, [r4, #20]
 80034a2:	425b      	negs	r3, r3
 80034a4:	61a3      	str	r3, [r4, #24]
 80034a6:	6923      	ldr	r3, [r4, #16]
 80034a8:	b943      	cbnz	r3, 80034bc <__swsetup_r+0xa8>
 80034aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034ae:	d1c4      	bne.n	800343a <__swsetup_r+0x26>
 80034b0:	bd38      	pop	{r3, r4, r5, pc}
 80034b2:	0781      	lsls	r1, r0, #30
 80034b4:	bf58      	it	pl
 80034b6:	6963      	ldrpl	r3, [r4, #20]
 80034b8:	60a3      	str	r3, [r4, #8]
 80034ba:	e7f4      	b.n	80034a6 <__swsetup_r+0x92>
 80034bc:	2000      	movs	r0, #0
 80034be:	e7f7      	b.n	80034b0 <__swsetup_r+0x9c>
 80034c0:	20000064 	.word	0x20000064

080034c4 <memset>:
 80034c4:	4402      	add	r2, r0
 80034c6:	4603      	mov	r3, r0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d100      	bne.n	80034ce <memset+0xa>
 80034cc:	4770      	bx	lr
 80034ce:	f803 1b01 	strb.w	r1, [r3], #1
 80034d2:	e7f9      	b.n	80034c8 <memset+0x4>

080034d4 <strncmp>:
 80034d4:	b510      	push	{r4, lr}
 80034d6:	b16a      	cbz	r2, 80034f4 <strncmp+0x20>
 80034d8:	3901      	subs	r1, #1
 80034da:	1884      	adds	r4, r0, r2
 80034dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d103      	bne.n	80034f0 <strncmp+0x1c>
 80034e8:	42a0      	cmp	r0, r4
 80034ea:	d001      	beq.n	80034f0 <strncmp+0x1c>
 80034ec:	2a00      	cmp	r2, #0
 80034ee:	d1f5      	bne.n	80034dc <strncmp+0x8>
 80034f0:	1ad0      	subs	r0, r2, r3
 80034f2:	bd10      	pop	{r4, pc}
 80034f4:	4610      	mov	r0, r2
 80034f6:	e7fc      	b.n	80034f2 <strncmp+0x1e>

080034f8 <_close_r>:
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	4d06      	ldr	r5, [pc, #24]	; (8003514 <_close_r+0x1c>)
 80034fc:	2300      	movs	r3, #0
 80034fe:	4604      	mov	r4, r0
 8003500:	4608      	mov	r0, r1
 8003502:	602b      	str	r3, [r5, #0]
 8003504:	f7fd fd17 	bl	8000f36 <_close>
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	d102      	bne.n	8003512 <_close_r+0x1a>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	b103      	cbz	r3, 8003512 <_close_r+0x1a>
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	bd38      	pop	{r3, r4, r5, pc}
 8003514:	200002a4 	.word	0x200002a4

08003518 <_lseek_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4d07      	ldr	r5, [pc, #28]	; (8003538 <_lseek_r+0x20>)
 800351c:	4604      	mov	r4, r0
 800351e:	4608      	mov	r0, r1
 8003520:	4611      	mov	r1, r2
 8003522:	2200      	movs	r2, #0
 8003524:	602a      	str	r2, [r5, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	f7fd fd2c 	bl	8000f84 <_lseek>
 800352c:	1c43      	adds	r3, r0, #1
 800352e:	d102      	bne.n	8003536 <_lseek_r+0x1e>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	b103      	cbz	r3, 8003536 <_lseek_r+0x1e>
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	bd38      	pop	{r3, r4, r5, pc}
 8003538:	200002a4 	.word	0x200002a4

0800353c <_read_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	4d07      	ldr	r5, [pc, #28]	; (800355c <_read_r+0x20>)
 8003540:	4604      	mov	r4, r0
 8003542:	4608      	mov	r0, r1
 8003544:	4611      	mov	r1, r2
 8003546:	2200      	movs	r2, #0
 8003548:	602a      	str	r2, [r5, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	f7fd fcd6 	bl	8000efc <_read>
 8003550:	1c43      	adds	r3, r0, #1
 8003552:	d102      	bne.n	800355a <_read_r+0x1e>
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	b103      	cbz	r3, 800355a <_read_r+0x1e>
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	bd38      	pop	{r3, r4, r5, pc}
 800355c:	200002a4 	.word	0x200002a4

08003560 <_write_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4d07      	ldr	r5, [pc, #28]	; (8003580 <_write_r+0x20>)
 8003564:	4604      	mov	r4, r0
 8003566:	4608      	mov	r0, r1
 8003568:	4611      	mov	r1, r2
 800356a:	2200      	movs	r2, #0
 800356c:	602a      	str	r2, [r5, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	f7fc fff0 	bl	8000554 <_write>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d102      	bne.n	800357e <_write_r+0x1e>
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	b103      	cbz	r3, 800357e <_write_r+0x1e>
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	bd38      	pop	{r3, r4, r5, pc}
 8003580:	200002a4 	.word	0x200002a4

08003584 <__errno>:
 8003584:	4b01      	ldr	r3, [pc, #4]	; (800358c <__errno+0x8>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000064 	.word	0x20000064

08003590 <__libc_init_array>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	4d0d      	ldr	r5, [pc, #52]	; (80035c8 <__libc_init_array+0x38>)
 8003594:	4c0d      	ldr	r4, [pc, #52]	; (80035cc <__libc_init_array+0x3c>)
 8003596:	1b64      	subs	r4, r4, r5
 8003598:	10a4      	asrs	r4, r4, #2
 800359a:	2600      	movs	r6, #0
 800359c:	42a6      	cmp	r6, r4
 800359e:	d109      	bne.n	80035b4 <__libc_init_array+0x24>
 80035a0:	4d0b      	ldr	r5, [pc, #44]	; (80035d0 <__libc_init_array+0x40>)
 80035a2:	4c0c      	ldr	r4, [pc, #48]	; (80035d4 <__libc_init_array+0x44>)
 80035a4:	f000 fd32 	bl	800400c <_init>
 80035a8:	1b64      	subs	r4, r4, r5
 80035aa:	10a4      	asrs	r4, r4, #2
 80035ac:	2600      	movs	r6, #0
 80035ae:	42a6      	cmp	r6, r4
 80035b0:	d105      	bne.n	80035be <__libc_init_array+0x2e>
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
 80035b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b8:	4798      	blx	r3
 80035ba:	3601      	adds	r6, #1
 80035bc:	e7ee      	b.n	800359c <__libc_init_array+0xc>
 80035be:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c2:	4798      	blx	r3
 80035c4:	3601      	adds	r6, #1
 80035c6:	e7f2      	b.n	80035ae <__libc_init_array+0x1e>
 80035c8:	08004100 	.word	0x08004100
 80035cc:	08004100 	.word	0x08004100
 80035d0:	08004100 	.word	0x08004100
 80035d4:	08004104 	.word	0x08004104

080035d8 <__retarget_lock_init_recursive>:
 80035d8:	4770      	bx	lr

080035da <__retarget_lock_acquire_recursive>:
 80035da:	4770      	bx	lr

080035dc <__retarget_lock_release_recursive>:
 80035dc:	4770      	bx	lr

080035de <strcpy>:
 80035de:	4603      	mov	r3, r0
 80035e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035e4:	f803 2b01 	strb.w	r2, [r3], #1
 80035e8:	2a00      	cmp	r2, #0
 80035ea:	d1f9      	bne.n	80035e0 <strcpy+0x2>
 80035ec:	4770      	bx	lr
	...

080035f0 <_free_r>:
 80035f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035f2:	2900      	cmp	r1, #0
 80035f4:	d044      	beq.n	8003680 <_free_r+0x90>
 80035f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035fa:	9001      	str	r0, [sp, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f1a1 0404 	sub.w	r4, r1, #4
 8003602:	bfb8      	it	lt
 8003604:	18e4      	addlt	r4, r4, r3
 8003606:	f000 f8df 	bl	80037c8 <__malloc_lock>
 800360a:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <_free_r+0x94>)
 800360c:	9801      	ldr	r0, [sp, #4]
 800360e:	6813      	ldr	r3, [r2, #0]
 8003610:	b933      	cbnz	r3, 8003620 <_free_r+0x30>
 8003612:	6063      	str	r3, [r4, #4]
 8003614:	6014      	str	r4, [r2, #0]
 8003616:	b003      	add	sp, #12
 8003618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800361c:	f000 b8da 	b.w	80037d4 <__malloc_unlock>
 8003620:	42a3      	cmp	r3, r4
 8003622:	d908      	bls.n	8003636 <_free_r+0x46>
 8003624:	6825      	ldr	r5, [r4, #0]
 8003626:	1961      	adds	r1, r4, r5
 8003628:	428b      	cmp	r3, r1
 800362a:	bf01      	itttt	eq
 800362c:	6819      	ldreq	r1, [r3, #0]
 800362e:	685b      	ldreq	r3, [r3, #4]
 8003630:	1949      	addeq	r1, r1, r5
 8003632:	6021      	streq	r1, [r4, #0]
 8003634:	e7ed      	b.n	8003612 <_free_r+0x22>
 8003636:	461a      	mov	r2, r3
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	b10b      	cbz	r3, 8003640 <_free_r+0x50>
 800363c:	42a3      	cmp	r3, r4
 800363e:	d9fa      	bls.n	8003636 <_free_r+0x46>
 8003640:	6811      	ldr	r1, [r2, #0]
 8003642:	1855      	adds	r5, r2, r1
 8003644:	42a5      	cmp	r5, r4
 8003646:	d10b      	bne.n	8003660 <_free_r+0x70>
 8003648:	6824      	ldr	r4, [r4, #0]
 800364a:	4421      	add	r1, r4
 800364c:	1854      	adds	r4, r2, r1
 800364e:	42a3      	cmp	r3, r4
 8003650:	6011      	str	r1, [r2, #0]
 8003652:	d1e0      	bne.n	8003616 <_free_r+0x26>
 8003654:	681c      	ldr	r4, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	6053      	str	r3, [r2, #4]
 800365a:	440c      	add	r4, r1
 800365c:	6014      	str	r4, [r2, #0]
 800365e:	e7da      	b.n	8003616 <_free_r+0x26>
 8003660:	d902      	bls.n	8003668 <_free_r+0x78>
 8003662:	230c      	movs	r3, #12
 8003664:	6003      	str	r3, [r0, #0]
 8003666:	e7d6      	b.n	8003616 <_free_r+0x26>
 8003668:	6825      	ldr	r5, [r4, #0]
 800366a:	1961      	adds	r1, r4, r5
 800366c:	428b      	cmp	r3, r1
 800366e:	bf04      	itt	eq
 8003670:	6819      	ldreq	r1, [r3, #0]
 8003672:	685b      	ldreq	r3, [r3, #4]
 8003674:	6063      	str	r3, [r4, #4]
 8003676:	bf04      	itt	eq
 8003678:	1949      	addeq	r1, r1, r5
 800367a:	6021      	streq	r1, [r4, #0]
 800367c:	6054      	str	r4, [r2, #4]
 800367e:	e7ca      	b.n	8003616 <_free_r+0x26>
 8003680:	b003      	add	sp, #12
 8003682:	bd30      	pop	{r4, r5, pc}
 8003684:	200002ac 	.word	0x200002ac

08003688 <sbrk_aligned>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	4e0e      	ldr	r6, [pc, #56]	; (80036c4 <sbrk_aligned+0x3c>)
 800368c:	460c      	mov	r4, r1
 800368e:	6831      	ldr	r1, [r6, #0]
 8003690:	4605      	mov	r5, r0
 8003692:	b911      	cbnz	r1, 800369a <sbrk_aligned+0x12>
 8003694:	f000 fcaa 	bl	8003fec <_sbrk_r>
 8003698:	6030      	str	r0, [r6, #0]
 800369a:	4621      	mov	r1, r4
 800369c:	4628      	mov	r0, r5
 800369e:	f000 fca5 	bl	8003fec <_sbrk_r>
 80036a2:	1c43      	adds	r3, r0, #1
 80036a4:	d00a      	beq.n	80036bc <sbrk_aligned+0x34>
 80036a6:	1cc4      	adds	r4, r0, #3
 80036a8:	f024 0403 	bic.w	r4, r4, #3
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d007      	beq.n	80036c0 <sbrk_aligned+0x38>
 80036b0:	1a21      	subs	r1, r4, r0
 80036b2:	4628      	mov	r0, r5
 80036b4:	f000 fc9a 	bl	8003fec <_sbrk_r>
 80036b8:	3001      	adds	r0, #1
 80036ba:	d101      	bne.n	80036c0 <sbrk_aligned+0x38>
 80036bc:	f04f 34ff 	mov.w	r4, #4294967295
 80036c0:	4620      	mov	r0, r4
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	200002b0 	.word	0x200002b0

080036c8 <_malloc_r>:
 80036c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036cc:	1ccd      	adds	r5, r1, #3
 80036ce:	f025 0503 	bic.w	r5, r5, #3
 80036d2:	3508      	adds	r5, #8
 80036d4:	2d0c      	cmp	r5, #12
 80036d6:	bf38      	it	cc
 80036d8:	250c      	movcc	r5, #12
 80036da:	2d00      	cmp	r5, #0
 80036dc:	4607      	mov	r7, r0
 80036de:	db01      	blt.n	80036e4 <_malloc_r+0x1c>
 80036e0:	42a9      	cmp	r1, r5
 80036e2:	d905      	bls.n	80036f0 <_malloc_r+0x28>
 80036e4:	230c      	movs	r3, #12
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	2600      	movs	r6, #0
 80036ea:	4630      	mov	r0, r6
 80036ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037c4 <_malloc_r+0xfc>
 80036f4:	f000 f868 	bl	80037c8 <__malloc_lock>
 80036f8:	f8d8 3000 	ldr.w	r3, [r8]
 80036fc:	461c      	mov	r4, r3
 80036fe:	bb5c      	cbnz	r4, 8003758 <_malloc_r+0x90>
 8003700:	4629      	mov	r1, r5
 8003702:	4638      	mov	r0, r7
 8003704:	f7ff ffc0 	bl	8003688 <sbrk_aligned>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	4604      	mov	r4, r0
 800370c:	d155      	bne.n	80037ba <_malloc_r+0xf2>
 800370e:	f8d8 4000 	ldr.w	r4, [r8]
 8003712:	4626      	mov	r6, r4
 8003714:	2e00      	cmp	r6, #0
 8003716:	d145      	bne.n	80037a4 <_malloc_r+0xdc>
 8003718:	2c00      	cmp	r4, #0
 800371a:	d048      	beq.n	80037ae <_malloc_r+0xe6>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	4631      	mov	r1, r6
 8003720:	4638      	mov	r0, r7
 8003722:	eb04 0903 	add.w	r9, r4, r3
 8003726:	f000 fc61 	bl	8003fec <_sbrk_r>
 800372a:	4581      	cmp	r9, r0
 800372c:	d13f      	bne.n	80037ae <_malloc_r+0xe6>
 800372e:	6821      	ldr	r1, [r4, #0]
 8003730:	1a6d      	subs	r5, r5, r1
 8003732:	4629      	mov	r1, r5
 8003734:	4638      	mov	r0, r7
 8003736:	f7ff ffa7 	bl	8003688 <sbrk_aligned>
 800373a:	3001      	adds	r0, #1
 800373c:	d037      	beq.n	80037ae <_malloc_r+0xe6>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	442b      	add	r3, r5
 8003742:	6023      	str	r3, [r4, #0]
 8003744:	f8d8 3000 	ldr.w	r3, [r8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d038      	beq.n	80037be <_malloc_r+0xf6>
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	42a2      	cmp	r2, r4
 8003750:	d12b      	bne.n	80037aa <_malloc_r+0xe2>
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e00f      	b.n	8003778 <_malloc_r+0xb0>
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	1b52      	subs	r2, r2, r5
 800375c:	d41f      	bmi.n	800379e <_malloc_r+0xd6>
 800375e:	2a0b      	cmp	r2, #11
 8003760:	d917      	bls.n	8003792 <_malloc_r+0xca>
 8003762:	1961      	adds	r1, r4, r5
 8003764:	42a3      	cmp	r3, r4
 8003766:	6025      	str	r5, [r4, #0]
 8003768:	bf18      	it	ne
 800376a:	6059      	strne	r1, [r3, #4]
 800376c:	6863      	ldr	r3, [r4, #4]
 800376e:	bf08      	it	eq
 8003770:	f8c8 1000 	streq.w	r1, [r8]
 8003774:	5162      	str	r2, [r4, r5]
 8003776:	604b      	str	r3, [r1, #4]
 8003778:	4638      	mov	r0, r7
 800377a:	f104 060b 	add.w	r6, r4, #11
 800377e:	f000 f829 	bl	80037d4 <__malloc_unlock>
 8003782:	f026 0607 	bic.w	r6, r6, #7
 8003786:	1d23      	adds	r3, r4, #4
 8003788:	1af2      	subs	r2, r6, r3
 800378a:	d0ae      	beq.n	80036ea <_malloc_r+0x22>
 800378c:	1b9b      	subs	r3, r3, r6
 800378e:	50a3      	str	r3, [r4, r2]
 8003790:	e7ab      	b.n	80036ea <_malloc_r+0x22>
 8003792:	42a3      	cmp	r3, r4
 8003794:	6862      	ldr	r2, [r4, #4]
 8003796:	d1dd      	bne.n	8003754 <_malloc_r+0x8c>
 8003798:	f8c8 2000 	str.w	r2, [r8]
 800379c:	e7ec      	b.n	8003778 <_malloc_r+0xb0>
 800379e:	4623      	mov	r3, r4
 80037a0:	6864      	ldr	r4, [r4, #4]
 80037a2:	e7ac      	b.n	80036fe <_malloc_r+0x36>
 80037a4:	4634      	mov	r4, r6
 80037a6:	6876      	ldr	r6, [r6, #4]
 80037a8:	e7b4      	b.n	8003714 <_malloc_r+0x4c>
 80037aa:	4613      	mov	r3, r2
 80037ac:	e7cc      	b.n	8003748 <_malloc_r+0x80>
 80037ae:	230c      	movs	r3, #12
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4638      	mov	r0, r7
 80037b4:	f000 f80e 	bl	80037d4 <__malloc_unlock>
 80037b8:	e797      	b.n	80036ea <_malloc_r+0x22>
 80037ba:	6025      	str	r5, [r4, #0]
 80037bc:	e7dc      	b.n	8003778 <_malloc_r+0xb0>
 80037be:	605b      	str	r3, [r3, #4]
 80037c0:	deff      	udf	#255	; 0xff
 80037c2:	bf00      	nop
 80037c4:	200002ac 	.word	0x200002ac

080037c8 <__malloc_lock>:
 80037c8:	4801      	ldr	r0, [pc, #4]	; (80037d0 <__malloc_lock+0x8>)
 80037ca:	f7ff bf06 	b.w	80035da <__retarget_lock_acquire_recursive>
 80037ce:	bf00      	nop
 80037d0:	200002a8 	.word	0x200002a8

080037d4 <__malloc_unlock>:
 80037d4:	4801      	ldr	r0, [pc, #4]	; (80037dc <__malloc_unlock+0x8>)
 80037d6:	f7ff bf01 	b.w	80035dc <__retarget_lock_release_recursive>
 80037da:	bf00      	nop
 80037dc:	200002a8 	.word	0x200002a8

080037e0 <__sfputc_r>:
 80037e0:	6893      	ldr	r3, [r2, #8]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	b410      	push	{r4}
 80037e8:	6093      	str	r3, [r2, #8]
 80037ea:	da08      	bge.n	80037fe <__sfputc_r+0x1e>
 80037ec:	6994      	ldr	r4, [r2, #24]
 80037ee:	42a3      	cmp	r3, r4
 80037f0:	db01      	blt.n	80037f6 <__sfputc_r+0x16>
 80037f2:	290a      	cmp	r1, #10
 80037f4:	d103      	bne.n	80037fe <__sfputc_r+0x1e>
 80037f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037fa:	f7ff bdce 	b.w	800339a <__swbuf_r>
 80037fe:	6813      	ldr	r3, [r2, #0]
 8003800:	1c58      	adds	r0, r3, #1
 8003802:	6010      	str	r0, [r2, #0]
 8003804:	7019      	strb	r1, [r3, #0]
 8003806:	4608      	mov	r0, r1
 8003808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800380c:	4770      	bx	lr

0800380e <__sfputs_r>:
 800380e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003810:	4606      	mov	r6, r0
 8003812:	460f      	mov	r7, r1
 8003814:	4614      	mov	r4, r2
 8003816:	18d5      	adds	r5, r2, r3
 8003818:	42ac      	cmp	r4, r5
 800381a:	d101      	bne.n	8003820 <__sfputs_r+0x12>
 800381c:	2000      	movs	r0, #0
 800381e:	e007      	b.n	8003830 <__sfputs_r+0x22>
 8003820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003824:	463a      	mov	r2, r7
 8003826:	4630      	mov	r0, r6
 8003828:	f7ff ffda 	bl	80037e0 <__sfputc_r>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d1f3      	bne.n	8003818 <__sfputs_r+0xa>
 8003830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003834 <_vfiprintf_r>:
 8003834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003838:	460d      	mov	r5, r1
 800383a:	b09d      	sub	sp, #116	; 0x74
 800383c:	4614      	mov	r4, r2
 800383e:	4698      	mov	r8, r3
 8003840:	4606      	mov	r6, r0
 8003842:	b118      	cbz	r0, 800384c <_vfiprintf_r+0x18>
 8003844:	6a03      	ldr	r3, [r0, #32]
 8003846:	b90b      	cbnz	r3, 800384c <_vfiprintf_r+0x18>
 8003848:	f7ff fcc0 	bl	80031cc <__sinit>
 800384c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800384e:	07d9      	lsls	r1, r3, #31
 8003850:	d405      	bmi.n	800385e <_vfiprintf_r+0x2a>
 8003852:	89ab      	ldrh	r3, [r5, #12]
 8003854:	059a      	lsls	r2, r3, #22
 8003856:	d402      	bmi.n	800385e <_vfiprintf_r+0x2a>
 8003858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800385a:	f7ff febe 	bl	80035da <__retarget_lock_acquire_recursive>
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	071b      	lsls	r3, r3, #28
 8003862:	d501      	bpl.n	8003868 <_vfiprintf_r+0x34>
 8003864:	692b      	ldr	r3, [r5, #16]
 8003866:	b99b      	cbnz	r3, 8003890 <_vfiprintf_r+0x5c>
 8003868:	4629      	mov	r1, r5
 800386a:	4630      	mov	r0, r6
 800386c:	f7ff fdd2 	bl	8003414 <__swsetup_r>
 8003870:	b170      	cbz	r0, 8003890 <_vfiprintf_r+0x5c>
 8003872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003874:	07dc      	lsls	r4, r3, #31
 8003876:	d504      	bpl.n	8003882 <_vfiprintf_r+0x4e>
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	b01d      	add	sp, #116	; 0x74
 800387e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003882:	89ab      	ldrh	r3, [r5, #12]
 8003884:	0598      	lsls	r0, r3, #22
 8003886:	d4f7      	bmi.n	8003878 <_vfiprintf_r+0x44>
 8003888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800388a:	f7ff fea7 	bl	80035dc <__retarget_lock_release_recursive>
 800388e:	e7f3      	b.n	8003878 <_vfiprintf_r+0x44>
 8003890:	2300      	movs	r3, #0
 8003892:	9309      	str	r3, [sp, #36]	; 0x24
 8003894:	2320      	movs	r3, #32
 8003896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800389a:	f8cd 800c 	str.w	r8, [sp, #12]
 800389e:	2330      	movs	r3, #48	; 0x30
 80038a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003a54 <_vfiprintf_r+0x220>
 80038a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038a8:	f04f 0901 	mov.w	r9, #1
 80038ac:	4623      	mov	r3, r4
 80038ae:	469a      	mov	sl, r3
 80038b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038b4:	b10a      	cbz	r2, 80038ba <_vfiprintf_r+0x86>
 80038b6:	2a25      	cmp	r2, #37	; 0x25
 80038b8:	d1f9      	bne.n	80038ae <_vfiprintf_r+0x7a>
 80038ba:	ebba 0b04 	subs.w	fp, sl, r4
 80038be:	d00b      	beq.n	80038d8 <_vfiprintf_r+0xa4>
 80038c0:	465b      	mov	r3, fp
 80038c2:	4622      	mov	r2, r4
 80038c4:	4629      	mov	r1, r5
 80038c6:	4630      	mov	r0, r6
 80038c8:	f7ff ffa1 	bl	800380e <__sfputs_r>
 80038cc:	3001      	adds	r0, #1
 80038ce:	f000 80a9 	beq.w	8003a24 <_vfiprintf_r+0x1f0>
 80038d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038d4:	445a      	add	r2, fp
 80038d6:	9209      	str	r2, [sp, #36]	; 0x24
 80038d8:	f89a 3000 	ldrb.w	r3, [sl]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80a1 	beq.w	8003a24 <_vfiprintf_r+0x1f0>
 80038e2:	2300      	movs	r3, #0
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295
 80038e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038ec:	f10a 0a01 	add.w	sl, sl, #1
 80038f0:	9304      	str	r3, [sp, #16]
 80038f2:	9307      	str	r3, [sp, #28]
 80038f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038f8:	931a      	str	r3, [sp, #104]	; 0x68
 80038fa:	4654      	mov	r4, sl
 80038fc:	2205      	movs	r2, #5
 80038fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003902:	4854      	ldr	r0, [pc, #336]	; (8003a54 <_vfiprintf_r+0x220>)
 8003904:	f7fc fc64 	bl	80001d0 <memchr>
 8003908:	9a04      	ldr	r2, [sp, #16]
 800390a:	b9d8      	cbnz	r0, 8003944 <_vfiprintf_r+0x110>
 800390c:	06d1      	lsls	r1, r2, #27
 800390e:	bf44      	itt	mi
 8003910:	2320      	movmi	r3, #32
 8003912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003916:	0713      	lsls	r3, r2, #28
 8003918:	bf44      	itt	mi
 800391a:	232b      	movmi	r3, #43	; 0x2b
 800391c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003920:	f89a 3000 	ldrb.w	r3, [sl]
 8003924:	2b2a      	cmp	r3, #42	; 0x2a
 8003926:	d015      	beq.n	8003954 <_vfiprintf_r+0x120>
 8003928:	9a07      	ldr	r2, [sp, #28]
 800392a:	4654      	mov	r4, sl
 800392c:	2000      	movs	r0, #0
 800392e:	f04f 0c0a 	mov.w	ip, #10
 8003932:	4621      	mov	r1, r4
 8003934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003938:	3b30      	subs	r3, #48	; 0x30
 800393a:	2b09      	cmp	r3, #9
 800393c:	d94d      	bls.n	80039da <_vfiprintf_r+0x1a6>
 800393e:	b1b0      	cbz	r0, 800396e <_vfiprintf_r+0x13a>
 8003940:	9207      	str	r2, [sp, #28]
 8003942:	e014      	b.n	800396e <_vfiprintf_r+0x13a>
 8003944:	eba0 0308 	sub.w	r3, r0, r8
 8003948:	fa09 f303 	lsl.w	r3, r9, r3
 800394c:	4313      	orrs	r3, r2
 800394e:	9304      	str	r3, [sp, #16]
 8003950:	46a2      	mov	sl, r4
 8003952:	e7d2      	b.n	80038fa <_vfiprintf_r+0xc6>
 8003954:	9b03      	ldr	r3, [sp, #12]
 8003956:	1d19      	adds	r1, r3, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	9103      	str	r1, [sp, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	bfbb      	ittet	lt
 8003960:	425b      	neglt	r3, r3
 8003962:	f042 0202 	orrlt.w	r2, r2, #2
 8003966:	9307      	strge	r3, [sp, #28]
 8003968:	9307      	strlt	r3, [sp, #28]
 800396a:	bfb8      	it	lt
 800396c:	9204      	strlt	r2, [sp, #16]
 800396e:	7823      	ldrb	r3, [r4, #0]
 8003970:	2b2e      	cmp	r3, #46	; 0x2e
 8003972:	d10c      	bne.n	800398e <_vfiprintf_r+0x15a>
 8003974:	7863      	ldrb	r3, [r4, #1]
 8003976:	2b2a      	cmp	r3, #42	; 0x2a
 8003978:	d134      	bne.n	80039e4 <_vfiprintf_r+0x1b0>
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	1d1a      	adds	r2, r3, #4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	9203      	str	r2, [sp, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	bfb8      	it	lt
 8003986:	f04f 33ff 	movlt.w	r3, #4294967295
 800398a:	3402      	adds	r4, #2
 800398c:	9305      	str	r3, [sp, #20]
 800398e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003a64 <_vfiprintf_r+0x230>
 8003992:	7821      	ldrb	r1, [r4, #0]
 8003994:	2203      	movs	r2, #3
 8003996:	4650      	mov	r0, sl
 8003998:	f7fc fc1a 	bl	80001d0 <memchr>
 800399c:	b138      	cbz	r0, 80039ae <_vfiprintf_r+0x17a>
 800399e:	9b04      	ldr	r3, [sp, #16]
 80039a0:	eba0 000a 	sub.w	r0, r0, sl
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	4082      	lsls	r2, r0
 80039a8:	4313      	orrs	r3, r2
 80039aa:	3401      	adds	r4, #1
 80039ac:	9304      	str	r3, [sp, #16]
 80039ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b2:	4829      	ldr	r0, [pc, #164]	; (8003a58 <_vfiprintf_r+0x224>)
 80039b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039b8:	2206      	movs	r2, #6
 80039ba:	f7fc fc09 	bl	80001d0 <memchr>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d03f      	beq.n	8003a42 <_vfiprintf_r+0x20e>
 80039c2:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <_vfiprintf_r+0x228>)
 80039c4:	bb1b      	cbnz	r3, 8003a0e <_vfiprintf_r+0x1da>
 80039c6:	9b03      	ldr	r3, [sp, #12]
 80039c8:	3307      	adds	r3, #7
 80039ca:	f023 0307 	bic.w	r3, r3, #7
 80039ce:	3308      	adds	r3, #8
 80039d0:	9303      	str	r3, [sp, #12]
 80039d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039d4:	443b      	add	r3, r7
 80039d6:	9309      	str	r3, [sp, #36]	; 0x24
 80039d8:	e768      	b.n	80038ac <_vfiprintf_r+0x78>
 80039da:	fb0c 3202 	mla	r2, ip, r2, r3
 80039de:	460c      	mov	r4, r1
 80039e0:	2001      	movs	r0, #1
 80039e2:	e7a6      	b.n	8003932 <_vfiprintf_r+0xfe>
 80039e4:	2300      	movs	r3, #0
 80039e6:	3401      	adds	r4, #1
 80039e8:	9305      	str	r3, [sp, #20]
 80039ea:	4619      	mov	r1, r3
 80039ec:	f04f 0c0a 	mov.w	ip, #10
 80039f0:	4620      	mov	r0, r4
 80039f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039f6:	3a30      	subs	r2, #48	; 0x30
 80039f8:	2a09      	cmp	r2, #9
 80039fa:	d903      	bls.n	8003a04 <_vfiprintf_r+0x1d0>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0c6      	beq.n	800398e <_vfiprintf_r+0x15a>
 8003a00:	9105      	str	r1, [sp, #20]
 8003a02:	e7c4      	b.n	800398e <_vfiprintf_r+0x15a>
 8003a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a08:	4604      	mov	r4, r0
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e7f0      	b.n	80039f0 <_vfiprintf_r+0x1bc>
 8003a0e:	ab03      	add	r3, sp, #12
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	462a      	mov	r2, r5
 8003a14:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <_vfiprintf_r+0x22c>)
 8003a16:	a904      	add	r1, sp, #16
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f3af 8000 	nop.w
 8003a1e:	4607      	mov	r7, r0
 8003a20:	1c78      	adds	r0, r7, #1
 8003a22:	d1d6      	bne.n	80039d2 <_vfiprintf_r+0x19e>
 8003a24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a26:	07d9      	lsls	r1, r3, #31
 8003a28:	d405      	bmi.n	8003a36 <_vfiprintf_r+0x202>
 8003a2a:	89ab      	ldrh	r3, [r5, #12]
 8003a2c:	059a      	lsls	r2, r3, #22
 8003a2e:	d402      	bmi.n	8003a36 <_vfiprintf_r+0x202>
 8003a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a32:	f7ff fdd3 	bl	80035dc <__retarget_lock_release_recursive>
 8003a36:	89ab      	ldrh	r3, [r5, #12]
 8003a38:	065b      	lsls	r3, r3, #25
 8003a3a:	f53f af1d 	bmi.w	8003878 <_vfiprintf_r+0x44>
 8003a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a40:	e71c      	b.n	800387c <_vfiprintf_r+0x48>
 8003a42:	ab03      	add	r3, sp, #12
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	462a      	mov	r2, r5
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <_vfiprintf_r+0x22c>)
 8003a4a:	a904      	add	r1, sp, #16
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f000 f879 	bl	8003b44 <_printf_i>
 8003a52:	e7e4      	b.n	8003a1e <_vfiprintf_r+0x1ea>
 8003a54:	080040cc 	.word	0x080040cc
 8003a58:	080040d6 	.word	0x080040d6
 8003a5c:	00000000 	.word	0x00000000
 8003a60:	0800380f 	.word	0x0800380f
 8003a64:	080040d2 	.word	0x080040d2

08003a68 <_printf_common>:
 8003a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6c:	4616      	mov	r6, r2
 8003a6e:	4699      	mov	r9, r3
 8003a70:	688a      	ldr	r2, [r1, #8]
 8003a72:	690b      	ldr	r3, [r1, #16]
 8003a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	bfb8      	it	lt
 8003a7c:	4613      	movlt	r3, r2
 8003a7e:	6033      	str	r3, [r6, #0]
 8003a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a84:	4607      	mov	r7, r0
 8003a86:	460c      	mov	r4, r1
 8003a88:	b10a      	cbz	r2, 8003a8e <_printf_common+0x26>
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	6033      	str	r3, [r6, #0]
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	0699      	lsls	r1, r3, #26
 8003a92:	bf42      	ittt	mi
 8003a94:	6833      	ldrmi	r3, [r6, #0]
 8003a96:	3302      	addmi	r3, #2
 8003a98:	6033      	strmi	r3, [r6, #0]
 8003a9a:	6825      	ldr	r5, [r4, #0]
 8003a9c:	f015 0506 	ands.w	r5, r5, #6
 8003aa0:	d106      	bne.n	8003ab0 <_printf_common+0x48>
 8003aa2:	f104 0a19 	add.w	sl, r4, #25
 8003aa6:	68e3      	ldr	r3, [r4, #12]
 8003aa8:	6832      	ldr	r2, [r6, #0]
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	42ab      	cmp	r3, r5
 8003aae:	dc26      	bgt.n	8003afe <_printf_common+0x96>
 8003ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ab4:	1e13      	subs	r3, r2, #0
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	bf18      	it	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	0692      	lsls	r2, r2, #26
 8003abe:	d42b      	bmi.n	8003b18 <_printf_common+0xb0>
 8003ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ac4:	4649      	mov	r1, r9
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	47c0      	blx	r8
 8003aca:	3001      	adds	r0, #1
 8003acc:	d01e      	beq.n	8003b0c <_printf_common+0xa4>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	6922      	ldr	r2, [r4, #16]
 8003ad2:	f003 0306 	and.w	r3, r3, #6
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	bf02      	ittt	eq
 8003ada:	68e5      	ldreq	r5, [r4, #12]
 8003adc:	6833      	ldreq	r3, [r6, #0]
 8003ade:	1aed      	subeq	r5, r5, r3
 8003ae0:	68a3      	ldr	r3, [r4, #8]
 8003ae2:	bf0c      	ite	eq
 8003ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ae8:	2500      	movne	r5, #0
 8003aea:	4293      	cmp	r3, r2
 8003aec:	bfc4      	itt	gt
 8003aee:	1a9b      	subgt	r3, r3, r2
 8003af0:	18ed      	addgt	r5, r5, r3
 8003af2:	2600      	movs	r6, #0
 8003af4:	341a      	adds	r4, #26
 8003af6:	42b5      	cmp	r5, r6
 8003af8:	d11a      	bne.n	8003b30 <_printf_common+0xc8>
 8003afa:	2000      	movs	r0, #0
 8003afc:	e008      	b.n	8003b10 <_printf_common+0xa8>
 8003afe:	2301      	movs	r3, #1
 8003b00:	4652      	mov	r2, sl
 8003b02:	4649      	mov	r1, r9
 8003b04:	4638      	mov	r0, r7
 8003b06:	47c0      	blx	r8
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d103      	bne.n	8003b14 <_printf_common+0xac>
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b14:	3501      	adds	r5, #1
 8003b16:	e7c6      	b.n	8003aa6 <_printf_common+0x3e>
 8003b18:	18e1      	adds	r1, r4, r3
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	2030      	movs	r0, #48	; 0x30
 8003b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b22:	4422      	add	r2, r4
 8003b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	e7c7      	b.n	8003ac0 <_printf_common+0x58>
 8003b30:	2301      	movs	r3, #1
 8003b32:	4622      	mov	r2, r4
 8003b34:	4649      	mov	r1, r9
 8003b36:	4638      	mov	r0, r7
 8003b38:	47c0      	blx	r8
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d0e6      	beq.n	8003b0c <_printf_common+0xa4>
 8003b3e:	3601      	adds	r6, #1
 8003b40:	e7d9      	b.n	8003af6 <_printf_common+0x8e>
	...

08003b44 <_printf_i>:
 8003b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b48:	7e0f      	ldrb	r7, [r1, #24]
 8003b4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b4c:	2f78      	cmp	r7, #120	; 0x78
 8003b4e:	4691      	mov	r9, r2
 8003b50:	4680      	mov	r8, r0
 8003b52:	460c      	mov	r4, r1
 8003b54:	469a      	mov	sl, r3
 8003b56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b5a:	d807      	bhi.n	8003b6c <_printf_i+0x28>
 8003b5c:	2f62      	cmp	r7, #98	; 0x62
 8003b5e:	d80a      	bhi.n	8003b76 <_printf_i+0x32>
 8003b60:	2f00      	cmp	r7, #0
 8003b62:	f000 80d4 	beq.w	8003d0e <_printf_i+0x1ca>
 8003b66:	2f58      	cmp	r7, #88	; 0x58
 8003b68:	f000 80c0 	beq.w	8003cec <_printf_i+0x1a8>
 8003b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b74:	e03a      	b.n	8003bec <_printf_i+0xa8>
 8003b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b7a:	2b15      	cmp	r3, #21
 8003b7c:	d8f6      	bhi.n	8003b6c <_printf_i+0x28>
 8003b7e:	a101      	add	r1, pc, #4	; (adr r1, 8003b84 <_printf_i+0x40>)
 8003b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b84:	08003bdd 	.word	0x08003bdd
 8003b88:	08003bf1 	.word	0x08003bf1
 8003b8c:	08003b6d 	.word	0x08003b6d
 8003b90:	08003b6d 	.word	0x08003b6d
 8003b94:	08003b6d 	.word	0x08003b6d
 8003b98:	08003b6d 	.word	0x08003b6d
 8003b9c:	08003bf1 	.word	0x08003bf1
 8003ba0:	08003b6d 	.word	0x08003b6d
 8003ba4:	08003b6d 	.word	0x08003b6d
 8003ba8:	08003b6d 	.word	0x08003b6d
 8003bac:	08003b6d 	.word	0x08003b6d
 8003bb0:	08003cf5 	.word	0x08003cf5
 8003bb4:	08003c1d 	.word	0x08003c1d
 8003bb8:	08003caf 	.word	0x08003caf
 8003bbc:	08003b6d 	.word	0x08003b6d
 8003bc0:	08003b6d 	.word	0x08003b6d
 8003bc4:	08003d17 	.word	0x08003d17
 8003bc8:	08003b6d 	.word	0x08003b6d
 8003bcc:	08003c1d 	.word	0x08003c1d
 8003bd0:	08003b6d 	.word	0x08003b6d
 8003bd4:	08003b6d 	.word	0x08003b6d
 8003bd8:	08003cb7 	.word	0x08003cb7
 8003bdc:	682b      	ldr	r3, [r5, #0]
 8003bde:	1d1a      	adds	r2, r3, #4
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	602a      	str	r2, [r5, #0]
 8003be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bec:	2301      	movs	r3, #1
 8003bee:	e09f      	b.n	8003d30 <_printf_i+0x1ec>
 8003bf0:	6820      	ldr	r0, [r4, #0]
 8003bf2:	682b      	ldr	r3, [r5, #0]
 8003bf4:	0607      	lsls	r7, r0, #24
 8003bf6:	f103 0104 	add.w	r1, r3, #4
 8003bfa:	6029      	str	r1, [r5, #0]
 8003bfc:	d501      	bpl.n	8003c02 <_printf_i+0xbe>
 8003bfe:	681e      	ldr	r6, [r3, #0]
 8003c00:	e003      	b.n	8003c0a <_printf_i+0xc6>
 8003c02:	0646      	lsls	r6, r0, #25
 8003c04:	d5fb      	bpl.n	8003bfe <_printf_i+0xba>
 8003c06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c0a:	2e00      	cmp	r6, #0
 8003c0c:	da03      	bge.n	8003c16 <_printf_i+0xd2>
 8003c0e:	232d      	movs	r3, #45	; 0x2d
 8003c10:	4276      	negs	r6, r6
 8003c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c16:	485a      	ldr	r0, [pc, #360]	; (8003d80 <_printf_i+0x23c>)
 8003c18:	230a      	movs	r3, #10
 8003c1a:	e012      	b.n	8003c42 <_printf_i+0xfe>
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	6820      	ldr	r0, [r4, #0]
 8003c20:	1d19      	adds	r1, r3, #4
 8003c22:	6029      	str	r1, [r5, #0]
 8003c24:	0605      	lsls	r5, r0, #24
 8003c26:	d501      	bpl.n	8003c2c <_printf_i+0xe8>
 8003c28:	681e      	ldr	r6, [r3, #0]
 8003c2a:	e002      	b.n	8003c32 <_printf_i+0xee>
 8003c2c:	0641      	lsls	r1, r0, #25
 8003c2e:	d5fb      	bpl.n	8003c28 <_printf_i+0xe4>
 8003c30:	881e      	ldrh	r6, [r3, #0]
 8003c32:	4853      	ldr	r0, [pc, #332]	; (8003d80 <_printf_i+0x23c>)
 8003c34:	2f6f      	cmp	r7, #111	; 0x6f
 8003c36:	bf0c      	ite	eq
 8003c38:	2308      	moveq	r3, #8
 8003c3a:	230a      	movne	r3, #10
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c42:	6865      	ldr	r5, [r4, #4]
 8003c44:	60a5      	str	r5, [r4, #8]
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	bfa2      	ittt	ge
 8003c4a:	6821      	ldrge	r1, [r4, #0]
 8003c4c:	f021 0104 	bicge.w	r1, r1, #4
 8003c50:	6021      	strge	r1, [r4, #0]
 8003c52:	b90e      	cbnz	r6, 8003c58 <_printf_i+0x114>
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	d04b      	beq.n	8003cf0 <_printf_i+0x1ac>
 8003c58:	4615      	mov	r5, r2
 8003c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8003c62:	5dc7      	ldrb	r7, [r0, r7]
 8003c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c68:	4637      	mov	r7, r6
 8003c6a:	42bb      	cmp	r3, r7
 8003c6c:	460e      	mov	r6, r1
 8003c6e:	d9f4      	bls.n	8003c5a <_printf_i+0x116>
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d10b      	bne.n	8003c8c <_printf_i+0x148>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	07de      	lsls	r6, r3, #31
 8003c78:	d508      	bpl.n	8003c8c <_printf_i+0x148>
 8003c7a:	6923      	ldr	r3, [r4, #16]
 8003c7c:	6861      	ldr	r1, [r4, #4]
 8003c7e:	4299      	cmp	r1, r3
 8003c80:	bfde      	ittt	le
 8003c82:	2330      	movle	r3, #48	; 0x30
 8003c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c8c:	1b52      	subs	r2, r2, r5
 8003c8e:	6122      	str	r2, [r4, #16]
 8003c90:	f8cd a000 	str.w	sl, [sp]
 8003c94:	464b      	mov	r3, r9
 8003c96:	aa03      	add	r2, sp, #12
 8003c98:	4621      	mov	r1, r4
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	f7ff fee4 	bl	8003a68 <_printf_common>
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d14a      	bne.n	8003d3a <_printf_i+0x1f6>
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	b004      	add	sp, #16
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	f043 0320 	orr.w	r3, r3, #32
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	4833      	ldr	r0, [pc, #204]	; (8003d84 <_printf_i+0x240>)
 8003cb8:	2778      	movs	r7, #120	; 0x78
 8003cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	6829      	ldr	r1, [r5, #0]
 8003cc2:	061f      	lsls	r7, r3, #24
 8003cc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cc8:	d402      	bmi.n	8003cd0 <_printf_i+0x18c>
 8003cca:	065f      	lsls	r7, r3, #25
 8003ccc:	bf48      	it	mi
 8003cce:	b2b6      	uxthmi	r6, r6
 8003cd0:	07df      	lsls	r7, r3, #31
 8003cd2:	bf48      	it	mi
 8003cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8003cd8:	6029      	str	r1, [r5, #0]
 8003cda:	bf48      	it	mi
 8003cdc:	6023      	strmi	r3, [r4, #0]
 8003cde:	b91e      	cbnz	r6, 8003ce8 <_printf_i+0x1a4>
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	f023 0320 	bic.w	r3, r3, #32
 8003ce6:	6023      	str	r3, [r4, #0]
 8003ce8:	2310      	movs	r3, #16
 8003cea:	e7a7      	b.n	8003c3c <_printf_i+0xf8>
 8003cec:	4824      	ldr	r0, [pc, #144]	; (8003d80 <_printf_i+0x23c>)
 8003cee:	e7e4      	b.n	8003cba <_printf_i+0x176>
 8003cf0:	4615      	mov	r5, r2
 8003cf2:	e7bd      	b.n	8003c70 <_printf_i+0x12c>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	6826      	ldr	r6, [r4, #0]
 8003cf8:	6961      	ldr	r1, [r4, #20]
 8003cfa:	1d18      	adds	r0, r3, #4
 8003cfc:	6028      	str	r0, [r5, #0]
 8003cfe:	0635      	lsls	r5, r6, #24
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	d501      	bpl.n	8003d08 <_printf_i+0x1c4>
 8003d04:	6019      	str	r1, [r3, #0]
 8003d06:	e002      	b.n	8003d0e <_printf_i+0x1ca>
 8003d08:	0670      	lsls	r0, r6, #25
 8003d0a:	d5fb      	bpl.n	8003d04 <_printf_i+0x1c0>
 8003d0c:	8019      	strh	r1, [r3, #0]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	4615      	mov	r5, r2
 8003d14:	e7bc      	b.n	8003c90 <_printf_i+0x14c>
 8003d16:	682b      	ldr	r3, [r5, #0]
 8003d18:	1d1a      	adds	r2, r3, #4
 8003d1a:	602a      	str	r2, [r5, #0]
 8003d1c:	681d      	ldr	r5, [r3, #0]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	2100      	movs	r1, #0
 8003d22:	4628      	mov	r0, r5
 8003d24:	f7fc fa54 	bl	80001d0 <memchr>
 8003d28:	b108      	cbz	r0, 8003d2e <_printf_i+0x1ea>
 8003d2a:	1b40      	subs	r0, r0, r5
 8003d2c:	6060      	str	r0, [r4, #4]
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	2300      	movs	r3, #0
 8003d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d38:	e7aa      	b.n	8003c90 <_printf_i+0x14c>
 8003d3a:	6923      	ldr	r3, [r4, #16]
 8003d3c:	462a      	mov	r2, r5
 8003d3e:	4649      	mov	r1, r9
 8003d40:	4640      	mov	r0, r8
 8003d42:	47d0      	blx	sl
 8003d44:	3001      	adds	r0, #1
 8003d46:	d0ad      	beq.n	8003ca4 <_printf_i+0x160>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	079b      	lsls	r3, r3, #30
 8003d4c:	d413      	bmi.n	8003d76 <_printf_i+0x232>
 8003d4e:	68e0      	ldr	r0, [r4, #12]
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	4298      	cmp	r0, r3
 8003d54:	bfb8      	it	lt
 8003d56:	4618      	movlt	r0, r3
 8003d58:	e7a6      	b.n	8003ca8 <_printf_i+0x164>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	4649      	mov	r1, r9
 8003d60:	4640      	mov	r0, r8
 8003d62:	47d0      	blx	sl
 8003d64:	3001      	adds	r0, #1
 8003d66:	d09d      	beq.n	8003ca4 <_printf_i+0x160>
 8003d68:	3501      	adds	r5, #1
 8003d6a:	68e3      	ldr	r3, [r4, #12]
 8003d6c:	9903      	ldr	r1, [sp, #12]
 8003d6e:	1a5b      	subs	r3, r3, r1
 8003d70:	42ab      	cmp	r3, r5
 8003d72:	dcf2      	bgt.n	8003d5a <_printf_i+0x216>
 8003d74:	e7eb      	b.n	8003d4e <_printf_i+0x20a>
 8003d76:	2500      	movs	r5, #0
 8003d78:	f104 0619 	add.w	r6, r4, #25
 8003d7c:	e7f5      	b.n	8003d6a <_printf_i+0x226>
 8003d7e:	bf00      	nop
 8003d80:	080040dd 	.word	0x080040dd
 8003d84:	080040ee 	.word	0x080040ee

08003d88 <__sflush_r>:
 8003d88:	898a      	ldrh	r2, [r1, #12]
 8003d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8e:	4605      	mov	r5, r0
 8003d90:	0710      	lsls	r0, r2, #28
 8003d92:	460c      	mov	r4, r1
 8003d94:	d458      	bmi.n	8003e48 <__sflush_r+0xc0>
 8003d96:	684b      	ldr	r3, [r1, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	dc05      	bgt.n	8003da8 <__sflush_r+0x20>
 8003d9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	dc02      	bgt.n	8003da8 <__sflush_r+0x20>
 8003da2:	2000      	movs	r0, #0
 8003da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	d0f9      	beq.n	8003da2 <__sflush_r+0x1a>
 8003dae:	2300      	movs	r3, #0
 8003db0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003db4:	682f      	ldr	r7, [r5, #0]
 8003db6:	6a21      	ldr	r1, [r4, #32]
 8003db8:	602b      	str	r3, [r5, #0]
 8003dba:	d032      	beq.n	8003e22 <__sflush_r+0x9a>
 8003dbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dbe:	89a3      	ldrh	r3, [r4, #12]
 8003dc0:	075a      	lsls	r2, r3, #29
 8003dc2:	d505      	bpl.n	8003dd0 <__sflush_r+0x48>
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	1ac0      	subs	r0, r0, r3
 8003dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dca:	b10b      	cbz	r3, 8003dd0 <__sflush_r+0x48>
 8003dcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dce:	1ac0      	subs	r0, r0, r3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dd6:	6a21      	ldr	r1, [r4, #32]
 8003dd8:	4628      	mov	r0, r5
 8003dda:	47b0      	blx	r6
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	d106      	bne.n	8003df0 <__sflush_r+0x68>
 8003de2:	6829      	ldr	r1, [r5, #0]
 8003de4:	291d      	cmp	r1, #29
 8003de6:	d82b      	bhi.n	8003e40 <__sflush_r+0xb8>
 8003de8:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <__sflush_r+0x108>)
 8003dea:	410a      	asrs	r2, r1
 8003dec:	07d6      	lsls	r6, r2, #31
 8003dee:	d427      	bmi.n	8003e40 <__sflush_r+0xb8>
 8003df0:	2200      	movs	r2, #0
 8003df2:	6062      	str	r2, [r4, #4]
 8003df4:	04d9      	lsls	r1, r3, #19
 8003df6:	6922      	ldr	r2, [r4, #16]
 8003df8:	6022      	str	r2, [r4, #0]
 8003dfa:	d504      	bpl.n	8003e06 <__sflush_r+0x7e>
 8003dfc:	1c42      	adds	r2, r0, #1
 8003dfe:	d101      	bne.n	8003e04 <__sflush_r+0x7c>
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	b903      	cbnz	r3, 8003e06 <__sflush_r+0x7e>
 8003e04:	6560      	str	r0, [r4, #84]	; 0x54
 8003e06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e08:	602f      	str	r7, [r5, #0]
 8003e0a:	2900      	cmp	r1, #0
 8003e0c:	d0c9      	beq.n	8003da2 <__sflush_r+0x1a>
 8003e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e12:	4299      	cmp	r1, r3
 8003e14:	d002      	beq.n	8003e1c <__sflush_r+0x94>
 8003e16:	4628      	mov	r0, r5
 8003e18:	f7ff fbea 	bl	80035f0 <_free_r>
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	6360      	str	r0, [r4, #52]	; 0x34
 8003e20:	e7c0      	b.n	8003da4 <__sflush_r+0x1c>
 8003e22:	2301      	movs	r3, #1
 8003e24:	4628      	mov	r0, r5
 8003e26:	47b0      	blx	r6
 8003e28:	1c41      	adds	r1, r0, #1
 8003e2a:	d1c8      	bne.n	8003dbe <__sflush_r+0x36>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0c5      	beq.n	8003dbe <__sflush_r+0x36>
 8003e32:	2b1d      	cmp	r3, #29
 8003e34:	d001      	beq.n	8003e3a <__sflush_r+0xb2>
 8003e36:	2b16      	cmp	r3, #22
 8003e38:	d101      	bne.n	8003e3e <__sflush_r+0xb6>
 8003e3a:	602f      	str	r7, [r5, #0]
 8003e3c:	e7b1      	b.n	8003da2 <__sflush_r+0x1a>
 8003e3e:	89a3      	ldrh	r3, [r4, #12]
 8003e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e44:	81a3      	strh	r3, [r4, #12]
 8003e46:	e7ad      	b.n	8003da4 <__sflush_r+0x1c>
 8003e48:	690f      	ldr	r7, [r1, #16]
 8003e4a:	2f00      	cmp	r7, #0
 8003e4c:	d0a9      	beq.n	8003da2 <__sflush_r+0x1a>
 8003e4e:	0793      	lsls	r3, r2, #30
 8003e50:	680e      	ldr	r6, [r1, #0]
 8003e52:	bf08      	it	eq
 8003e54:	694b      	ldreq	r3, [r1, #20]
 8003e56:	600f      	str	r7, [r1, #0]
 8003e58:	bf18      	it	ne
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	eba6 0807 	sub.w	r8, r6, r7
 8003e60:	608b      	str	r3, [r1, #8]
 8003e62:	f1b8 0f00 	cmp.w	r8, #0
 8003e66:	dd9c      	ble.n	8003da2 <__sflush_r+0x1a>
 8003e68:	6a21      	ldr	r1, [r4, #32]
 8003e6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	463a      	mov	r2, r7
 8003e70:	4628      	mov	r0, r5
 8003e72:	47b0      	blx	r6
 8003e74:	2800      	cmp	r0, #0
 8003e76:	dc06      	bgt.n	8003e86 <__sflush_r+0xfe>
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	e78e      	b.n	8003da4 <__sflush_r+0x1c>
 8003e86:	4407      	add	r7, r0
 8003e88:	eba8 0800 	sub.w	r8, r8, r0
 8003e8c:	e7e9      	b.n	8003e62 <__sflush_r+0xda>
 8003e8e:	bf00      	nop
 8003e90:	dfbffffe 	.word	0xdfbffffe

08003e94 <_fflush_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	690b      	ldr	r3, [r1, #16]
 8003e98:	4605      	mov	r5, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	b913      	cbnz	r3, 8003ea4 <_fflush_r+0x10>
 8003e9e:	2500      	movs	r5, #0
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	b118      	cbz	r0, 8003eae <_fflush_r+0x1a>
 8003ea6:	6a03      	ldr	r3, [r0, #32]
 8003ea8:	b90b      	cbnz	r3, 8003eae <_fflush_r+0x1a>
 8003eaa:	f7ff f98f 	bl	80031cc <__sinit>
 8003eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f3      	beq.n	8003e9e <_fflush_r+0xa>
 8003eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003eb8:	07d0      	lsls	r0, r2, #31
 8003eba:	d404      	bmi.n	8003ec6 <_fflush_r+0x32>
 8003ebc:	0599      	lsls	r1, r3, #22
 8003ebe:	d402      	bmi.n	8003ec6 <_fflush_r+0x32>
 8003ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ec2:	f7ff fb8a 	bl	80035da <__retarget_lock_acquire_recursive>
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	4621      	mov	r1, r4
 8003eca:	f7ff ff5d 	bl	8003d88 <__sflush_r>
 8003ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ed0:	07da      	lsls	r2, r3, #31
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	d4e4      	bmi.n	8003ea0 <_fflush_r+0xc>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	059b      	lsls	r3, r3, #22
 8003eda:	d4e1      	bmi.n	8003ea0 <_fflush_r+0xc>
 8003edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ede:	f7ff fb7d 	bl	80035dc <__retarget_lock_release_recursive>
 8003ee2:	e7dd      	b.n	8003ea0 <_fflush_r+0xc>

08003ee4 <__swhatbuf_r>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eec:	2900      	cmp	r1, #0
 8003eee:	b096      	sub	sp, #88	; 0x58
 8003ef0:	4615      	mov	r5, r2
 8003ef2:	461e      	mov	r6, r3
 8003ef4:	da0d      	bge.n	8003f12 <__swhatbuf_r+0x2e>
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	bf0c      	ite	eq
 8003f02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003f06:	2340      	movne	r3, #64	; 0x40
 8003f08:	2000      	movs	r0, #0
 8003f0a:	6031      	str	r1, [r6, #0]
 8003f0c:	602b      	str	r3, [r5, #0]
 8003f0e:	b016      	add	sp, #88	; 0x58
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	466a      	mov	r2, sp
 8003f14:	f000 f848 	bl	8003fa8 <_fstat_r>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	dbec      	blt.n	8003ef6 <__swhatbuf_r+0x12>
 8003f1c:	9901      	ldr	r1, [sp, #4]
 8003f1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003f22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f26:	4259      	negs	r1, r3
 8003f28:	4159      	adcs	r1, r3
 8003f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f2e:	e7eb      	b.n	8003f08 <__swhatbuf_r+0x24>

08003f30 <__smakebuf_r>:
 8003f30:	898b      	ldrh	r3, [r1, #12]
 8003f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f34:	079d      	lsls	r5, r3, #30
 8003f36:	4606      	mov	r6, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	d507      	bpl.n	8003f4c <__smakebuf_r+0x1c>
 8003f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	6123      	str	r3, [r4, #16]
 8003f44:	2301      	movs	r3, #1
 8003f46:	6163      	str	r3, [r4, #20]
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	ab01      	add	r3, sp, #4
 8003f4e:	466a      	mov	r2, sp
 8003f50:	f7ff ffc8 	bl	8003ee4 <__swhatbuf_r>
 8003f54:	9900      	ldr	r1, [sp, #0]
 8003f56:	4605      	mov	r5, r0
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7ff fbb5 	bl	80036c8 <_malloc_r>
 8003f5e:	b948      	cbnz	r0, 8003f74 <__smakebuf_r+0x44>
 8003f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f64:	059a      	lsls	r2, r3, #22
 8003f66:	d4ef      	bmi.n	8003f48 <__smakebuf_r+0x18>
 8003f68:	f023 0303 	bic.w	r3, r3, #3
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	e7e3      	b.n	8003f3c <__smakebuf_r+0xc>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	6020      	str	r0, [r4, #0]
 8003f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	9b00      	ldr	r3, [sp, #0]
 8003f80:	6163      	str	r3, [r4, #20]
 8003f82:	9b01      	ldr	r3, [sp, #4]
 8003f84:	6120      	str	r0, [r4, #16]
 8003f86:	b15b      	cbz	r3, 8003fa0 <__smakebuf_r+0x70>
 8003f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f000 f81d 	bl	8003fcc <_isatty_r>
 8003f92:	b128      	cbz	r0, 8003fa0 <__smakebuf_r+0x70>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	431d      	orrs	r5, r3
 8003fa4:	81a5      	strh	r5, [r4, #12]
 8003fa6:	e7cf      	b.n	8003f48 <__smakebuf_r+0x18>

08003fa8 <_fstat_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	4d07      	ldr	r5, [pc, #28]	; (8003fc8 <_fstat_r+0x20>)
 8003fac:	2300      	movs	r3, #0
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	602b      	str	r3, [r5, #0]
 8003fb6:	f7fc ffca 	bl	8000f4e <_fstat>
 8003fba:	1c43      	adds	r3, r0, #1
 8003fbc:	d102      	bne.n	8003fc4 <_fstat_r+0x1c>
 8003fbe:	682b      	ldr	r3, [r5, #0]
 8003fc0:	b103      	cbz	r3, 8003fc4 <_fstat_r+0x1c>
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	bd38      	pop	{r3, r4, r5, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200002a4 	.word	0x200002a4

08003fcc <_isatty_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d06      	ldr	r5, [pc, #24]	; (8003fe8 <_isatty_r+0x1c>)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	602b      	str	r3, [r5, #0]
 8003fd8:	f7fc ffc9 	bl	8000f6e <_isatty>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d102      	bne.n	8003fe6 <_isatty_r+0x1a>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	b103      	cbz	r3, 8003fe6 <_isatty_r+0x1a>
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	200002a4 	.word	0x200002a4

08003fec <_sbrk_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4d06      	ldr	r5, [pc, #24]	; (8004008 <_sbrk_r+0x1c>)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	f7fc ffd2 	bl	8000fa0 <_sbrk>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d102      	bne.n	8004006 <_sbrk_r+0x1a>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	b103      	cbz	r3, 8004006 <_sbrk_r+0x1a>
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	bd38      	pop	{r3, r4, r5, pc}
 8004008:	200002a4 	.word	0x200002a4

0800400c <_init>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

08004018 <_fini>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr
